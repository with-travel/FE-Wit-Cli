# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Upload archive directly to TestFlight (Flutter 방식 적용)"
  lane :upload_archive_to_testflight do |options|
    changelog = options[:changelog] || ENV["CHANGELOG"] || "새로운 버전이 출시되었습니다."

    puts "🚀 ========================================"
    puts "🚀 TestFlight 직접 업로드 (2단계 방식)"
    puts "🚀 ========================================"
    puts "📝 변경사항: #{changelog}"

    # 아카이브 파일 찾기
    possible_archive_paths = [
      "../../build/Wit.xcarchive",
      "../build/Wit.xcarchive", 
      "build/Wit.xcarchive"
    ]
    archive_path = possible_archive_paths.find { |p| File.exist?(p) }
    UI.user_error!("Archive file not found") unless archive_path
    puts "✅ 아카이브: #{archive_path}"
    puts "📦 크기: #{`du -sh '#{archive_path}'`.strip}"

    # App Store Connect API Key 설정
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"], 
      key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"]
    )

    puts "🔑 API Key 설정 완료"

    # 🎯 1단계: 아카이브 유효성 검사
    puts "🔍 아카이브 유효성 검사 중..."
    
    # 아카이브 구조 확인
    if File.exist?("#{archive_path}/Products/Applications")
      puts "✅ 아카이브 구조 정상: Products/Applications 존재"
    else
      puts "❌ 아카이브 구조 이상: Products/Applications 없음"
      puts "📁 아카이브 내용:"
      puts `ls -la '#{archive_path}'`
      UI.user_error!("Invalid archive structure")
    end
    
    # Info.plist 확인
    info_plist_path = "#{archive_path}/Info.plist"
    if File.exist?(info_plist_path)
      puts "✅ Info.plist 존재"
    else
      puts "❌ Info.plist 없음"
      UI.user_error!("Archive Info.plist not found")
    end
    
    # 🎯 2단계: xcodebuild로 직접 IPA 내보내기 (gym 대신)
    puts "📦 xcodebuild로 직접 IPA 내보내기 중..."
    
    # Export Options 생성
    export_options = {
      method: "app-store",
      teamID: ENV["APPLE_TEAM_ID"],
      uploadSymbols: true,
      uploadBitcode: false,
      compileBitcode: false,
      stripSwiftSymbols: true,
      signingStyle: "automatic"
    }
    
    # ExportOptions.plist 생성
    export_plist_path = "../../build/ExportOptions.plist"
    File.open(export_plist_path, 'w') do |file|
      file.write(export_options.to_plist)
    end
    
    # IPA 출력 디렉토리 생성
    sh "mkdir -p ../../build/ipa"
    
    # xcodebuild -exportArchive 실행
    begin
      sh %Q[
        xcodebuild -exportArchive \
          -archivePath "#{archive_path}" \
          -exportPath "../../build/ipa" \
          -exportOptionsPlist "#{export_plist_path}" \
          -allowProvisioningUpdates
      ]
      
      # 생성된 IPA 파일 찾기
      ipa_files = Dir.glob("../../build/ipa/*.ipa")
      if ipa_files.empty?
        UI.user_error!("No IPA file found after export")
      end
      
      ipa_path = ipa_files.first
      puts "✅ IPA 생성 완료: #{ipa_path}"
      
    rescue => e
      puts "❌ xcodebuild exportArchive 실패: #{e.message}"
      
      # 디버깅 정보
      puts "🔍 디버깅 정보:"
      puts "  - 아카이브 경로: #{archive_path}"
      puts "  - Export Options: #{export_options}"
      puts "  - 작업 디렉토리: #{Dir.pwd}"
      
      # 코드 사이닝 상태 확인
      puts "🔍 코드 사이닝 상태:"
      sh "security find-identity -v -p codesigning"
      
      # 프로비저닝 프로파일 확인
      puts "🔍 프로비저닝 프로파일:"
      sh "ls -la ~/Library/MobileDevice/Provisioning\\ Profiles/ | head -5"
      
      UI.user_error!("IPA export failed: #{e.message}")
    end
    
    puts "✅ IPA 생성 완료: #{ipa_path}"

    # 🎯 2단계: .ipa 파일을 TestFlight에 업로드
    puts "🚀 TestFlight 업로드 시작..."
    pilot(
      api_key: api_key,
      ipa: ipa_path,  # .ipa 파일 경로 전달
      changelog: changelog,
      skip_waiting_for_build_processing: true,  # 빠른 업로드
      distribute_external: false,
      notify_external_testers: false,
      uses_non_exempt_encryption: false,  # 암호화 규정 자동 설정
      skip_submission: true
    )

    puts "✅ TestFlight 업로드 완료!"
    puts "🚀 ========================================"
  end

  desc "Complete build and upload process"
  lane :release do
    upload_archive_to_testflight
  end
end