# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Upload archive directly to TestFlight (Flutter 방식 적용)"
  lane :upload_archive_to_testflight do |options|
    changelog = options[:changelog] || ENV["CHANGELOG"] || "새로운 버전이 출시되었습니다."

    puts "🚀 ========================================"
    puts "🚀 TestFlight 직접 업로드 (2단계 방식)"
    puts "🚀 ========================================"
    puts "📝 변경사항: #{changelog}"

    # 아카이브 파일 찾기
    possible_archive_paths = [
      "../../build/Wit.xcarchive",
      "../build/Wit.xcarchive", 
      "build/Wit.xcarchive"
    ]
    archive_path = possible_archive_paths.find { |p| File.exist?(p) }
    UI.user_error!("Archive file not found") unless archive_path
    puts "✅ 아카이브: #{archive_path}"
    puts "📦 크기: #{`du -sh '#{archive_path}'`.strip}"

    # App Store Connect API Key 설정
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"], 
      key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"]
    )

    puts "🔑 API Key 설정 완료"

    # 🎯 1단계: 아카이브 유효성 검사
    puts "🔍 아카이브 유효성 검사 중..."
    
    # 아카이브 구조 확인
    if File.exist?("#{archive_path}/Products/Applications")
      puts "✅ 아카이브 구조 정상: Products/Applications 존재"
    else
      puts "❌ 아카이브 구조 이상: Products/Applications 없음"
      puts "📁 아카이브 내용:"
      puts `ls -la '#{archive_path}'`
      UI.user_error!("Invalid archive structure")
    end
    
    # Info.plist 확인
    info_plist_path = "#{archive_path}/Info.plist"
    if File.exist?(info_plist_path)
      puts "✅ Info.plist 존재"
    else
      puts "❌ Info.plist 없음"
      UI.user_error!("Archive Info.plist not found")
    end
    
    # 🎯 2단계: .xcarchive에서 .ipa 생성 (향상된 설정)
    puts "📦 .xcarchive에서 .ipa 생성 중..."
    
    begin
      ipa_path = gym(
        archive_path: archive_path,
        skip_build_archive: true,  # 아카이브는 이미 존재하므로 빌드 건너뛰기
        export_method: "app-store",
        output_directory: "../../build/ipa",
        output_name: "Wit.ipa",
        export_options: {
          method: "app-store",
          teamID: ENV["APPLE_TEAM_ID"],
          uploadSymbols: true,
          uploadBitcode: false,
          compileBitcode: false,
          stripSwiftSymbols: true,
          signingStyle: "automatic"
        },
        # 추가 안정성 옵션
        clean: false,
        silent: false,
        skip_profile_detection: false
      )
    rescue => e
      puts "❌ IPA 생성 실패: #{e.message}"
      
      # 디버깅 정보 출력
      puts "🔍 디버깅 정보:"
      puts "  - 아카이브 경로: #{archive_path}"
      puts "  - 아카이브 크기: #{`du -sh '#{archive_path}'`.strip}"
      puts "  - 작업 디렉토리: #{Dir.pwd}"
      
      # 재시도 (다른 방법으로)
      puts "🔄 다른 방법으로 재시도..."
      ipa_path = gym(
        archive_path: archive_path,
        skip_build_archive: true,
        export_method: "app-store",
        output_directory: "../../build/ipa",
        output_name: "Wit.ipa",
        export_options: {
          method: "app-store",
          teamID: ENV["APPLE_TEAM_ID"]
        }
      )
    end
    
    puts "✅ IPA 생성 완료: #{ipa_path}"

    # 🎯 2단계: .ipa 파일을 TestFlight에 업로드
    puts "🚀 TestFlight 업로드 시작..."
    pilot(
      api_key: api_key,
      ipa: ipa_path,  # .ipa 파일 경로 전달
      changelog: changelog,
      skip_waiting_for_build_processing: true,  # 빠른 업로드
      distribute_external: false,
      notify_external_testers: false,
      uses_non_exempt_encryption: false,  # 암호화 규정 자동 설정
      skip_submission: true
    )

    puts "✅ TestFlight 업로드 완료!"
    puts "🚀 ========================================"
  end

  desc "Complete build and upload process"
  lane :release do
    upload_archive_to_testflight
  end
end