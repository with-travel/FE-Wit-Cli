# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# ios/fastlane/Fastfile

default_platform(:ios)

platform :ios do
  desc "Upload archive directly to TestFlight (from .xcarchive => .ipa => upload)"
  lane :upload_archive_to_testflight do |options|
    # 1) 변경사항(릴리즈 노트)
    changelog = options[:changelog] || ENV["CHANGELOG"] || "새로운 버전이 출시되었습니다."

    puts "🚀 ========================================"
    puts "🚀 TestFlight 직접 업로드 시작"
    puts "🚀 ========================================"
    puts "📝 변경사항: #{changelog}"

    # 2) .xcarchive 찾기
    possible_archive_paths = [
      "../../build/Wit.xcarchive",  # fastlane 디렉토리 기준
      "../build/Wit.xcarchive",     # ios 디렉토리 기준
      "build/Wit.xcarchive"         # ios/build
    ]

    archive_path = possible_archive_paths.find { |p| File.exist?(p) }
    unless archive_path
      puts "❌ 아카이브 파일을 찾을 수 없습니다!"
      possible_archive_paths.each { |p| puts "  - #{p}" }
      UI.user_error!("Archive file not found")
    end
    puts "✅ 아카이브 파일 발견: #{archive_path}"
    puts "📦 아카이브 크기: #{`du -sh '#{archive_path}'`.strip}"

    # 3) .ipa 추출 (기존 아카이브 재활용)
    #    - output_directory: ../build (ios/fastlane 기준으로 한 단계 위의 build)
    #    - output_name: Wit.ipa
    ipa_path = build_ios_app(
      archive_path: archive_path,
      skip_archive: true,                 # 이미 아카이브 있음
      export_method: "app-store",
      configuration: "Release",           # ✅ Release 강제
      workspace: "./Wit.xcworkspace",     # (자동 감지되지만 명시해도 안전)
      scheme: "Wit",
    
      # 내보내기 단계에서 프로비저닝/서명 정보를 확실히 지정
      export_options: {
        method: "app-store",
        signingStyle: "manual",
        signingCertificate: "Apple Distribution",
        provisioningProfiles: {
          "com.Juhkang.Wit" => (ENV["PROVISIONING_PROFILE_SPECIFIER"] || "Wit CLI Distribution")
        }
      },

      # 불필요한 재탐지/패키지 처리 끄기(속도+안정)
      skip_profile_detection: true,
      skip_package_dependencies_resolution: true,
    
      # 내보내기 시 프로필/서명 관련 업데이트 허용(필요시)
      export_xcargs: "-allowProvisioningUpdates",
    
      output_directory: "../build",
      output_name: "Wit"
    )


    # 4) TestFlight 업로드
    upload_to_testflight(
      ipa: ipa_path,
      changelog: changelog,
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      api_key_path: ENV["APP_STORE_CONNECT_API_KEY_PATH"] # 🔐 명시적으로 전달
    )

    puts "✅ TestFlight 업로드 완료!"
    puts "🚀 ========================================"
  end

  desc "Complete build and upload process"
  lane :release do
    upload_archive_to_testflight
  end
end
