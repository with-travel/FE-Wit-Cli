# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Upload archive directly to TestFlight (Flutter 방식 적용)"
  lane :upload_archive_to_testflight do |options|
    changelog = options[:changelog] || ENV["CHANGELOG"] || "새로운 버전이 출시되었습니다."

    puts "🚀 ========================================"
    puts "🚀 TestFlight 직접 업로드 (2단계 방식)"
    puts "🚀 ========================================"
    puts "📝 변경사항: #{changelog}"

    # 아카이브 파일 찾기
    possible_archive_paths = [
      "../../build/Wit.xcarchive",
      "../build/Wit.xcarchive", 
      "build/Wit.xcarchive"
    ]
    archive_path = possible_archive_paths.find { |p| File.exist?(p) }
    UI.user_error!("Archive file not found") unless archive_path
    puts "✅ 아카이브: #{archive_path}"
    puts "📦 크기: #{`du -sh '#{archive_path}'`.strip}"

    # App Store Connect API Key 설정
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"], 
      key_filepath: ENV["APP_STORE_CONNECT_API_KEY_PATH"]
    )

    puts "🔑 API Key 설정 완료"
    
    # 🔍 필수 환경변수 검증
    puts "🔍 GitHub Secrets에서 전달된 환경변수 검증 중..."
    required_env_vars = {
      "APP_STORE_CONNECT_API_KEY_ID" => ENV["APP_STORE_CONNECT_API_KEY_ID"],
      "APP_STORE_CONNECT_ISSUER_ID" => ENV["APP_STORE_CONNECT_ISSUER_ID"],
      "APP_STORE_CONNECT_API_KEY_PATH" => ENV["APP_STORE_CONNECT_API_KEY_PATH"],
      "APPLE_ID" => ENV["APPLE_ID"],
      "APPLE_TEAM_ID" => ENV["APPLE_TEAM_ID"]
    }
    
    missing_vars = []
    required_env_vars.each do |name, value|
      if value.nil? || value.empty?
        missing_vars << name
        puts "❌ #{name}: 누락됨"
      else
        puts "✅ #{name}: 설정됨"
      end
    end
    
    unless missing_vars.empty?
      UI.user_error!("필수 환경변수가 누락되었습니다: #{missing_vars.join(', ')}\nGitHub Secrets 설정을 확인해주세요.")
    end
    
    puts "✅ 모든 필수 환경변수 검증 완료"
    
    # Apple Developer Account 인증 (xcodebuild가 계정을 인식하도록)
    puts "🔐 Apple Developer Account 인증 중..."
    begin
      # App Store Connect API를 통한 계정 인증
      sh "xcrun altool --validate-app --type ios --file dummy.ipa --apiKey #{ENV['APP_STORE_CONNECT_API_KEY_ID']} --apiIssuer #{ENV['APP_STORE_CONNECT_ISSUER_ID']} 2>/dev/null || true"
      puts "✅ Apple Developer Account 인증 완료"
    rescue => e
      puts "⚠️ 계정 인증 중 오류 (계속 진행): #{e.message}"
    end

    # 🎯 1단계: 아카이브 유효성 검사
    puts "🔍 아카이브 유효성 검사 중..."
    
    # 아카이브 구조 확인
    if File.exist?("#{archive_path}/Products/Applications")
      puts "✅ 아카이브 구조 정상: Products/Applications 존재"
    else
      puts "❌ 아카이브 구조 이상: Products/Applications 없음"
      puts "📁 아카이브 내용:"
      puts `ls -la '#{archive_path}'`
      UI.user_error!("Invalid archive structure")
    end
    
    # Info.plist 확인
    info_plist_path = "#{archive_path}/Info.plist"
    if File.exist?(info_plist_path)
      puts "✅ Info.plist 존재"
    else
      puts "❌ Info.plist 없음"
      UI.user_error!("Archive Info.plist not found")
    end
    
    # 🎯 2단계: xcodebuild로 직접 IPA 내보내기 (gym 대신)
    puts "📦 xcodebuild로 직접 IPA 내보내기 중..."
    
    # 🔍 실제 프로비저닝 프로파일 이름 찾기
    puts "🔍 설치된 프로비저닝 프로파일에서 'com.Juhkang.Wit' 매칭 프로파일 찾는 중..."
    
    # 설치된 모든 프로비저닝 프로파일 검사
    profile_files = Dir.glob("#{Dir.home}/Library/MobileDevice/Provisioning Profiles/*.mobileprovision")
    matching_profile_name = nil
    
    profile_files.each do |profile_path|
      begin
        # 프로파일 내용 파싱
        profile_content = `security cms -D -i "#{profile_path}" 2>/dev/null`
        if profile_content.include?("com.Juhkang.Wit")
          # 프로파일 이름 추출
          if profile_content =~ /<key>Name<\/key>\s*<string>([^<]+)<\/string>/
            matching_profile_name = $1
            puts "✅ 매칭 프로파일 발견: #{matching_profile_name}"
            break
          end
        end
      rescue => e
        puts "⚠️ 프로파일 파싱 오류: #{e.message}"
      end
    end
    
    # 매칭 프로파일이 없으면 환경변수 사용 (하드코딩 제거)
    unless matching_profile_name
      matching_profile_name = ENV["PROVISIONING_PROFILE_SPECIFIER"]
      if matching_profile_name
        puts "✅ 환경변수에서 프로파일 사용: #{matching_profile_name}"
      else
        UI.user_error!("프로비저닝 프로파일을 찾을 수 없습니다. GitHub Secrets와 워크플로우 설정을 확인해주세요.")
      end
    end

    # Export Options 생성 (동적 프로파일명 사용)
    export_options = {
      method: "app-store-connect",  # deprecated "app-store" -> "app-store-connect"
      teamID: ENV["APPLE_TEAM_ID"],
      uploadSymbols: true,
      uploadBitcode: false,
      compileBitcode: false,
      stripSwiftSymbols: true,
      signingStyle: "manual",  # automatic -> manual (더 안정적)
      # 동적으로 찾은 프로비저닝 프로파일 사용
      provisioningProfiles: {
        "com.Juhkang.Wit" => matching_profile_name
      },
      # 코드 사이닝 인증서 명시적 지정
      signingCertificate: "Apple Distribution"
    }
    
    puts "📋 Export Options 설정:"
    puts "  - Method: #{export_options[:method]}"
    puts "  - Team ID: #{export_options[:teamID]}"
    puts "  - Signing Style: #{export_options[:signingStyle]}"
    puts "  - Provisioning Profile: #{matching_profile_name}"
    puts "  - Signing Certificate: #{export_options[:signingCertificate]}"
    
    # ExportOptions.plist 생성
    export_plist_path = "../../build/ExportOptions.plist"
    File.open(export_plist_path, 'w') do |file|
      file.write(export_options.to_plist)
    end
    
    # IPA 출력 디렉토리 생성
    sh "mkdir -p ../../build/ipa"
    
    # xcodebuild -exportArchive 실행
    begin
      sh %Q[
        xcodebuild -exportArchive \
          -archivePath "#{archive_path}" \
          -exportPath "../../build/ipa" \
          -exportOptionsPlist "#{export_plist_path}" \
          -allowProvisioningUpdates
      ]
      
      # 생성된 IPA 파일 찾기 (다중 경로 검색)
      puts "🔍 현재 작업 디렉토리: #{Dir.pwd}"
      puts "🔍 Fastfile 위치: #{__dir__}"
      
      # 가능한 IPA 경로들 (우선순위 순)
      search_paths = [
        "../../build/ipa/*.ipa",                           # 기본 경로
        File.expand_path("../../build/ipa/*.ipa", __dir__), # 절대경로 변환
        "../build/ipa/*.ipa",                              # 한 단계 위
        "build/ipa/*.ipa",                                 # 현재 위치 기준
        File.expand_path("../../../build/ipa/*.ipa", __dir__), # 더 위
        "/Users/runner/work/*/build/ipa/*.ipa"             # GitHub Actions 절대경로
      ]
      
      ipa_path = nil
      
      search_paths.each_with_index do |search_path, index|
        puts "🔍 [#{index + 1}/#{search_paths.length}] 검색 중: #{search_path}"
        
        found_files = Dir.glob(search_path)
        puts "   찾은 파일: #{found_files}"
        
        if !found_files.empty?
          ipa_path = found_files.first
          puts "✅ IPA 파일 발견: #{ipa_path}"
          break
        end
      end
      
      if ipa_path.nil?
        puts "❌ 모든 경로에서 IPA 파일을 찾을 수 없습니다"
        puts "🔍 디버깅을 위한 디렉토리 구조:"
        [
          "../../build",
          "../build", 
          "build",
          "/Users/runner/work"
        ].each do |dir|
          if Dir.exist?(File.expand_path(dir, __dir__))
            puts "📁 #{dir}:"
            sh "find #{File.expand_path(dir, __dir__)} -name '*.ipa' -o -name 'ipa' -type d 2>/dev/null || true"
          end
        end
        UI.user_error!("No IPA file found after export")
      end
      
      # 파일 존재 확인
      unless File.exist?(ipa_path)
        UI.user_error!("IPA file does not exist at path: #{ipa_path}")
      end
      
      puts "📊 IPA 파일 정보:"
      puts "  - 경로: #{ipa_path}"
      puts "  - 크기: #{File.size(ipa_path)} bytes"
      puts "  - 존재 확인: #{File.exist?(ipa_path) ? '✅' : '❌'}"
      
    rescue => e
      puts "❌ xcodebuild exportArchive 실패: #{e.message}"
      
      # 디버깅 정보
      puts "🔍 디버깅 정보:"
      puts "  - 아카이브 경로: #{archive_path}"
      puts "  - Export Options: #{export_options}"
      puts "  - 작업 디렉토리: #{Dir.pwd}"
      
      # 코드 사이닝 상태 확인
      puts "🔍 코드 사이닝 상태:"
      sh "security find-identity -v -p codesigning"
      
      # 프로비저닝 프로파일 확인
      puts "🔍 프로비저닝 프로파일:"
      sh "ls -la ~/Library/MobileDevice/Provisioning\\ Profiles/ | head -5"
      
      UI.user_error!("IPA export failed: #{e.message}")
    end

    # 🎯 2단계: .ipa 파일을 TestFlight에 업로드
    puts "🚀 TestFlight 업로드 시작..."
    pilot(
      api_key: api_key,
      ipa: ipa_path,  # .ipa 파일 경로 전달
      changelog: changelog,
      skip_waiting_for_build_processing: true,  # 빠른 업로드
      distribute_external: false,
      notify_external_testers: false,
      uses_non_exempt_encryption: false,  # 암호화 규정 자동 설정
      skip_submission: true
    )

    puts "✅ TestFlight 업로드 완료!"
    puts "🚀 ========================================"
  end

  desc "Complete build and upload process"
  lane :release do
    upload_archive_to_testflight
  end
end