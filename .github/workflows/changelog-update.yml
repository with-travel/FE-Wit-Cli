name: 📝 CHANGELOG Update

on:
  workflow_dispatch:
    inputs:
      deprecated:
        description: '이 워크플로우는 비활성화되었습니다'
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  changelog-update:
    name: 📝 CHANGELOG Update
    runs-on: macos-14
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get PR Number from workflow run
        id: get_pr
        run: |
          # workflow_run에서 PR 번호 추출
          PR_NUMBER=$(gh api repos/${{ github.repository }}/pulls \
            --jq '.[] | select(.head.sha == "${{ github.event.workflow_run.head_sha }}") | .number' \
            | head -1)

          if [ -z "$PR_NUMBER" ]; then
            echo "❌ PR 번호를 찾을 수 없습니다."
            exit 1
          fi

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "✅ PR 번호: $PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Request CodeRabbit Summary
        run: |
          echo "🤖 CodeRabbit에게 리뷰 요청 중..."
          gh pr comment ${{ steps.get_pr.outputs.pr_number }} --body "@coderabbitai review"
          echo "✅ CodeRabbit 리뷰 요청 완료"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Wait for CodeRabbit Summary (Expo 방식 개선)
        id: detect_summary
        continue-on-error: true
        timeout-minutes: 10
        run: |
          PR_NUMBER="${{ steps.get_pr.outputs.pr_number }}"
          MAX_ATTEMPTS=120  # 10분 = 120 * 5초
          ATTEMPT=0

          echo "🔍 PR #$PR_NUMBER에서 CodeRabbit Summary 업데이트 감지 시작..."
          echo "최대 대기 시간: 10분 (5초마다 체크)"

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "[$ATTEMPT/$MAX_ATTEMPTS] CodeRabbit Summary 확인 중... ($(date '+%H:%M:%S'))"
            
            # GitHub API로 PR HTML 가져오기 (Expo 방식)
            curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.html" \
                 "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}" \
                 > pr_content.html
            
            # "No description provided" 체크
            if grep -q "No description provided" pr_content.html; then
              echo "❌ 아직 'No description provided' 상태입니다"
            elif grep -q "Summary by CodeRabbit" pr_content.html; then
              echo "✅ CodeRabbit Summary 발견! 파싱을 시작합니다"
              echo "summary_found=true" >> $GITHUB_OUTPUT
              break
            else
              echo "⏳ CodeRabbit Summary 아직 없음"
            fi
            
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              sleep 5
            fi
          done

          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "⚠️ 10분 대기 후에도 CodeRabbit Summary를 찾을 수 없습니다"
            echo "summary_found=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Grant execute permission to scripts
        run: |
          echo "📋 스크립트 파일 권한 설정 중..."
          if [ -f ".github/scripts/rn_version_manager.sh" ]; then
            chmod +x .github/scripts/rn_version_manager.sh
            echo "✅ rn_version_manager.sh 권한 설정 완료"
          else
            echo "❌ rn_version_manager.sh 파일을 찾을 수 없습니다!"
            exit 1
          fi

          if [ -f ".github/scripts/changelog_manager.py" ]; then
            chmod +x .github/scripts/changelog_manager.py
            echo "✅ changelog_manager.py 권한 설정 완료"
          else
            echo "⚠️ changelog_manager.py 파일을 찾을 수 없습니다 (선택적)"
          fi

      - name: Increment version and sync native files
        id: versioning
        run: |
          NEW_VERSION=$(./.github/scripts/rn_version_manager.sh increment)
          ./.github/scripts/rn_version_manager.sh sync
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Dynamic Summary Parsing and CHANGELOG Update
        if: steps.detect_summary.outputs.summary_found == 'true'
        run: |
          PR_NUMBER="${{ steps.get_pr.outputs.pr_number }}"
          VERSION="${{ steps.versioning.outputs.new_version }}"
          TIMESTAMP=$(date '+%Y-%m-%dT%H:%M:%SZ')

          echo "📝 CodeRabbit Summary 동적 파싱 시작..."

          # Summary 섹션 추출 (개선된 방식)
          echo "🔍 PR HTML에서 CodeRabbit Summary 추출 중..."

          # 1. HTML에서 Summary 섹션 추출
          sed -n '/<h2[^>]*>Summary by CodeRabbit<\/h2>/,/<\/div>/p' pr_content.html > summary_section.html

          # 2. Summary가 제대로 추출되었는지 확인
          SUMMARY_SIZE=$(wc -c < summary_section.html)
          echo "📄 추출된 Summary 섹션 크기: ${SUMMARY_SIZE} bytes"

          if [ "$SUMMARY_SIZE" -lt 100 ]; then
            echo "⚠️ Summary 섹션이 너무 작습니다. 다른 방식으로 추출 시도..."
            # 더 넓은 범위로 추출
            sed -n '/Summary by CodeRabbit/,/<!-- end of auto-generated comment/p' pr_content.html > summary_section.html
            SUMMARY_SIZE=$(wc -c < summary_section.html)
            echo "📄 재추출된 Summary 섹션 크기: ${SUMMARY_SIZE} bytes"
          fi

          # 3. HTML 태그 제거하고 텍스트만 추출
          cat summary_section.html | sed 's/<[^>]*>//g' | sed 's/&nbsp;/ /g; s/&amp;/\&/g; s/&lt;/</g; s/&gt;/>/g; s/&quot;/"/g' > raw_summary.txt

          # 4. 추출된 내용 확인
          echo "📋 추출된 Summary 내용 미리보기:"
          echo "===================="
          head -10 raw_summary.txt
          echo "===================="

          echo "🔍 동적 카테고리 추출 중..."
          echo "📄 Summary 섹션 미리보기:"
          head -10 summary_section.html

          # Python으로 강화된 파싱 (Flutter 앱 방식 적용)
          cat > parse_changelog.py << 'EOF'
          import re
          import json
          import html
          import sys
          import os
          from datetime import datetime

          def parse_coderabbit_summary(raw_text):
              """CodeRabbit Summary를 파싱하여 카테고리별로 분류"""
              print("🔍 CodeRabbit Summary 파싱 시작...")
              print(f"📄 원본 텍스트 길이: {len(raw_text)} characters")
              
              # 텍스트 정리
              text = raw_text.strip()
              lines = text.split('\n')
              
              # 디버깅을 위한 원본 텍스트 출력
              print("📋 원본 텍스트 내용:")
              print("=" * 60)
              for i, line in enumerate(lines[:20]):  # 처음 20줄만 출력
                  print(f"{i+1:2d}: {line}")
              print("=" * 60)
              
              detected_categories = {}
              current_category = None
              current_items = []
              
              # 한국어 카테고리 매핑
              category_mapping = {
                  '신규 기능': 'new_features',
                  '새로운 기능': 'new_features', 
                  'New Features': 'new_features',
                  'Features': 'new_features',
                  
                  '버그 수정': 'bug_fixes',
                  'Bug Fixes': 'bug_fixes',
                  'Fixes': 'bug_fixes',
                  '수정사항': 'bug_fixes',
                  
                  '스타일': 'style',
                  'Style': 'style',
                  'UI/UX': 'style',
                  
                  '리팩토링': 'refactor',
                  'Refactor': 'refactor',
                  
                  '작업': 'chores',
                  '작업(Chores)': 'chores',
                  'Chores': 'chores',
                  '기타': 'chores',
                  
                  '문서': 'documentation',
                  '문서화': 'documentation',
                  'Documentation': 'documentation',
                  'Docs': 'documentation',
                  
                  '테스트': 'tests',
                  'Tests': 'tests',
                  'Testing': 'tests',
                  
                  '성능': 'performance',
                  'Performance': 'performance',
                  
                  '보안': 'security',
                  'Security': 'security'
              }
              
              for line_num, line in enumerate(lines):
                  line = line.strip()
                  if not line:
                      continue
                  
                  print(f"🔍 [{line_num+1}] 처리 중: '{line}'")
                  
                  # 카테고리 제목 감지 (한국어/영어 모두 지원)
                  is_category = False
                  for category_name, category_key in category_mapping.items():
                      if line == category_name or line.startswith(category_name):
                          # 이전 카테고리 저장
                          if current_category and current_items:
                              if current_category not in detected_categories:
                                  detected_categories[current_category] = []
                              detected_categories[current_category].extend(current_items)
                              print(f"✅ 카테고리 저장: '{current_category}' -> {len(current_items)}개 아이템")
                          
                          # 새 카테고리 시작
                          current_category = category_key
                          current_items = []
                          is_category = True
                          print(f"🏷️ 새 카테고리 시작: '{category_name}' -> '{category_key}'")
                          break
                  
                  if is_category:
                      continue
                  
                  # 아이템 감지 (현재 카테고리가 있을 때만)
                  if current_category:
                      # 의미있는 텍스트인지 확인
                      if len(line) > 5 and not line.startswith('Summary by') and line != '해당 없음':
                          # 불필요한 문자 제거
                          clean_item = line.strip('- •').strip()
                          if clean_item and len(clean_item) > 10:
                              current_items.append(clean_item)
                              print(f"  📝 아이템 추가: '{clean_item[:60]}...'")
              
              # 마지막 카테고리 저장
              if current_category and current_items:
                  if current_category not in detected_categories:
                      detected_categories[current_category] = []
                  detected_categories[current_category].extend(current_items)
                  print(f"✅ 마지막 카테고리 저장: '{current_category}' -> {len(current_items)}개 아이템")
              
              print(f"🎯 최종 감지된 카테고리 수: {len(detected_categories)}")
              for category, items in detected_categories.items():
                  print(f"  📂 {category}: {len(items)}개 아이템")
                  for item in items[:2]:  # 처음 2개만 미리보기
                      print(f"    • {item[:60]}...")
              
              return detected_categories

          def main():
              # 환경 변수에서 값 가져오기
              version = os.environ.get('VERSION')
              pr_number = int(os.environ.get('PR_NUMBER'))
              timestamp = os.environ.get('TIMESTAMP')
              
              try:
                  # 텍스트 파일 읽기
                  with open('raw_summary.txt', 'r', encoding='utf-8') as f:
                      text_content = f.read()
                  
                  print(f"📄 읽어온 텍스트 내용:")
                  print("=" * 50)
                  print(text_content[:800] + "..." if len(text_content) > 800 else text_content)
                  print("=" * 50)
                  
                  # CodeRabbit Summary 파싱
                  categories = parse_coderabbit_summary(text_content)
                  
                  # Raw summary 저장
                  raw_summary = text_content.strip() if text_content else "Summary parsing failed"
                  
                  # 새로운 릴리즈 엔트리 생성
                  new_release = {
                      "version": version,
                      "date": timestamp[0:10],
                      "timestamp": timestamp,
                      "pr_number": pr_number,
                      "raw_summary": raw_summary,
                      "changes": categories  # 직접 카테고리 할당
                  }
                  
                  print("🎯 생성된 릴리즈 엔트리:")
                  for key, items in categories.items():
                      print(f"  - {key}: {len(items)}개 항목")
                      for item in items[:2]:
                          print(f"    • {item[:70]}...")
                  
                  # CHANGELOG.json 업데이트
                  try:
                      with open('CHANGELOG.json', 'r', encoding='utf-8') as f:
                          changelog_data = json.load(f)
                  except (FileNotFoundError, json.JSONDecodeError):
                      changelog_data = {"releases": []}
                  
                  # 새 릴리즈를 맨 앞에 추가
                  changelog_data["releases"].insert(0, new_release)
                  
                  # 파일 저장
                  with open('CHANGELOG.json', 'w', encoding='utf-8') as f:
                      json.dump(changelog_data, f, indent=2, ensure_ascii=False)
                  
                  print("✅ CHANGELOG.json 업데이트 완료!")
                  total_items = sum(len(items) for items in categories.values())
                  print(f"📊 총 {len(categories)}개 카테고리, {total_items}개 변경사항")
                  
              except Exception as e:
                  print(f"❌ 파싱 오류: {e}")
                  import traceback
                  print(f"📋 상세 오류:\n{traceback.format_exc()}")
                  
                  # 실패 시 기본 엔트리 생성
                  fallback_release = {
                      "version": version,
                      "date": timestamp[0:10],
                      "timestamp": timestamp,
                      "pr_number": pr_number,
                      "raw_summary": "파싱 실패",
                      "changes": {
                          "general": [f"PR #{pr_number}의 변경사항이 반영되었습니다."]
                      }
                  }
                  
                  try:
                      with open('CHANGELOG.json', 'r', encoding='utf-8') as f:
                          changelog_data = json.load(f)
                  except:
                      changelog_data = {"releases": []}
                  
                  changelog_data["releases"].insert(0, fallback_release)
                  
                  with open('CHANGELOG.json', 'w', encoding='utf-8') as f:
                      json.dump(changelog_data, f, indent=2, ensure_ascii=False)
                  
                  print("⚠️ 기본 엔트리로 CHANGELOG.json 업데이트 완료")

          if __name__ == "__main__":
              main()
          EOF

          # 환경 변수 설정하고 Python 스크립트 실행
          export VERSION="$VERSION"
          export PR_NUMBER="$PR_NUMBER"
          export TIMESTAMP="$TIMESTAMP"

          python3 parse_changelog.py

      - name: Generate CHANGELOG.md from JSON (Flutter 앱 방식)
        if: steps.detect_summary.outputs.summary_found == 'true'
        run: |
          echo "📄 CHANGELOG.json에서 CHANGELOG.md 재생성 중 (Flutter 앱 방식)..."

          python3 << 'PYTHON_SCRIPT'
          import json

          def get_category_title(key):
              """카테고리 키를 한국어 제목으로 변환 (Flutter 앱 방식)"""
              category_titles = {
                  'new_features': '신규 기능',
                  'bug_fixes': '버그 수정', 
                  'style': '스타일',
                  'refactor': '리팩토링',
                  'chores': '작업 정리',
                  'documentation': '문서',
                  'tests': '테스트',
                  'performance': '성능',
                  'security': '보안',
                  'general': '일반'
              }
              return category_titles.get(key.lower(), key.replace('_', ' ').title())

          try:
              with open('CHANGELOG.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              with open('CHANGELOG.md', 'w', encoding='utf-8') as f:
                  f.write("# CHANGELOG\n\n")
                  f.write("이 파일은 워크플로우에 의해 자동으로 생성됩니다.\n\n")

                  for release in data['releases']:
                      version = release.get('version', 'Unknown')
                      date = release.get('date', release.get('timestamp', '')[:10])
                      pr_number = release.get('pr_number', 'N/A')
                      changes = release.get('changes', {})
                      
                      f.write(f"## v{version} ({date})\n\n")
                      f.write(f"**PR:** #{pr_number}\n\n")
                      
                      # 변경사항이 있는 경우 카테고리별로 출력
                      if changes and any(items for items in changes.values() if items):
                          for category_key, items in changes.items():
                              if items and len(items) > 0:
                                  title = get_category_title(category_key)
                                  f.write(f"**{title}**\n")
                                  
                                  for item in items:
                                      f.write(f"- {item}\n")
                                  f.write("\n")
                      else:
                          # 변경사항이 없는 경우 기본 메시지
                          f.write(f"**일반**\n")
                          f.write(f"- PR #{pr_number}의 변경사항이 반영되었습니다.\n\n")
                      
                      f.write("---\n\n")
              
              print("✅ CHANGELOG.md 재생성 완료 (Flutter 앱 방식)!")
              
          except Exception as e:
              print(f"❌ CHANGELOG.md 생성 실패: {e}")
              import traceback
              print(f"📋 상세 오류:\n{traceback.format_exc()}")
              exit(1)
          PYTHON_SCRIPT

      - name: Generate PREVIOUS_CHANGES.md from JSON (Flutter 앱 방식)
        if: steps.detect_summary.outputs.summary_found == 'true'
        run: |
          echo "📄 PREVIOUS_CHANGES.md 생성 중 (Flutter 앱 방식)..."

          python3 << 'PYTHON_SCRIPT'
          import json
          import os

          def get_category_title(key):
              """카테고리 키를 한국어 제목으로 변환 (Flutter 앱 방식)"""
              category_titles = {
                  'new_features': '신규 기능',
                  'bug_fixes': '버그 수정', 
                  'style': '스타일',
                  'refactor': '리팩토링',
                  'chores': '작업 정리',
                  'documentation': '문서',
                  'tests': '테스트',
                  'performance': '성능',
                  'security': '보안',
                  'general': '일반'
              }
              return category_titles.get(key.lower(), key.replace('_', ' ').title())

          try:
              if os.path.exists('CHANGELOG.json'):
                  with open('CHANGELOG.json', 'r', encoding='utf-8') as f:
                      data = json.load(f)
                  
                  with open('PREVIOUS_CHANGES.md', 'w', encoding='utf-8') as f:
                      f.write("# 이전 변경사항\n\n")
                      
                      # 최신 버전(인덱스 0)을 제외한 나머지 버전들 처리
                      previous_releases = data.get('releases', [])[1:]
                      
                      if not previous_releases:
                          f.write("아직 이전 변경사항이 없습니다.\n")
                      else:
                          for release in previous_releases:
                              version = release.get('version', 'Unknown')
                              date = release.get('date', release.get('timestamp', '')[:10])
                              pr_number = release.get('pr_number', 'N/A')
                              changes = release.get('changes', {})
                              
                              f.write(f"## [{version}] - {date}\n\n")
                              f.write(f"**PR:** #{pr_number}\n\n")
                              
                              # 변경사항이 있는 경우 카테고리별로 출력
                              if changes and any(items for items in changes.values() if items):
                                  for category_key, items in changes.items():
                                      if items and len(items) > 0:
                                          title = get_category_title(category_key)
                                          f.write(f"**{title}**\n")
                                          for item in items:
                                              f.write(f"- {item}\n")
                                          f.write("\n")
                              else:
                                  # 변경사항이 없는 경우 기본 메시지
                                  f.write(f"**일반**\n")
                                  f.write(f"- PR #{pr_number}의 변경사항이 반영되었습니다.\n\n")
                              
                              f.write("---\n\n")
                  
                  print("✅ PREVIOUS_CHANGES.md 생성 완료 (Flutter 앱 방식)")
              else:
                  # CHANGELOG.json이 없는 경우
                  with open('PREVIOUS_CHANGES.md', 'w', encoding='utf-8') as f:
                      f.write("# 이전 변경사항\n\n")
                      f.write("아직 이전 변경사항이 없습니다.\n")
                  print("⚠️ CHANGELOG.json이 없어 기본 PREVIOUS_CHANGES.md 생성")
                  
          except Exception as e:
              print(f"❌ PREVIOUS_CHANGES.md 생성 실패: {e}")
              import traceback
              print(f"📋 상세 오류 정보:\n{traceback.format_exc()}")
              
              # 실패해도 워크플로우를 중단하지 않도록 기본 파일 생성
              try:
                  with open('PREVIOUS_CHANGES.md', 'w', encoding='utf-8') as f:
                      f.write("# 이전 변경사항\n\n")
                      f.write("변경사항 처리 중 오류가 발생했습니다.\n")
                  print("⚠️ 기본 PREVIOUS_CHANGES.md 파일을 생성했습니다.")
              except Exception as fallback_error:
                  print(f"❌ 기본 파일 생성도 실패: {fallback_error}")
              
              # 워크플로우 계속 진행을 위해 exit(1) 제거
              pass
          PYTHON_SCRIPT

      - name: Commit and push CHANGELOG updates
        run: |
          echo "📝 변경된 파일들을 커밋하고 푸시합니다..."

          git add package.json ios/Wit/Info.plist android/app/build.gradle CHANGELOG.json CHANGELOG.md PREVIOUS_CHANGES.md

          if ! git diff --staged --quiet; then
            # 커밋 메시지 생성
            COMMIT_MSG="chore: update CHANGELOG to v${{ steps.versioning.outputs.new_version }} [skip ci]"
            git commit -m "$COMMIT_MSG"
            
            echo "🚀 main 브랜치에 푸시 중..."
            git push origin main
            
            echo "🔄 PR 브랜치도 동기화 중..."
            # PR 정보 가져오기
            PR_NUMBER="${{ steps.get_pr.outputs.pr_number }}"
            
            if [ -n "$PR_NUMBER" ]; then
              # PR의 헤드 브랜치 정보 가져오기
              PR_HEAD_REF=$(gh pr view $PR_NUMBER --json headRefName --jq '.headRefName')
              
              echo "📋 PR #$PR_NUMBER의 헤드 브랜치: $PR_HEAD_REF"
              
              # 헤드 브랜치가 main인 경우에만 동기화 (무한 루프 방지)
              if [ "$PR_HEAD_REF" = "main" ]; then
                echo "✅ PR 브랜치가 main이므로 이미 동기화됨"
              else
                echo "🔄 PR 브랜치 $PR_HEAD_REF를 main과 동기화 중..."
                
                # PR 브랜치 체크아웃 및 업데이트
                git fetch origin
                git checkout -B "$PR_HEAD_REF" "origin/$PR_HEAD_REF"
                git merge main --no-edit
                git push origin "$PR_HEAD_REF"
                
                # main 브랜치로 돌아가기
                git checkout main
                
                echo "✅ PR 브랜치 동기화 완료"
              fi
            else
              echo "⚠️ PR 번호를 찾을 수 없어 PR 브랜치 동기화를 건너뜁니다"
            fi
          else
            echo "📄 변경사항이 없어 커밋을 건너뜁니다."
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create and push Git tag
        run: |
          git tag "v${{ steps.versioning.outputs.new_version }}"
          git push origin "v${{ steps.versioning.outputs.new_version }}"

      - name: Verify CHANGELOG generation
        run: |
          echo "📋 생성된 CHANGELOG.md 확인:"
          if [ -f "CHANGELOG.md" ]; then
            echo "✅ CHANGELOG.md 파일 존재"
            echo "📄 최신 버전 내용 미리보기:"
            head -20 CHANGELOG.md
          else
            echo "❌ CHANGELOG.md 파일이 생성되지 않았습니다!"
            exit 1
          fi

      - name: 🎉 CHANGELOG Update Success
        run: |
          echo "✅ CHANGELOG 업데이트가 성공했습니다!"
          echo "📦 새 버전: v${{ steps.versioning.outputs.new_version }}"
          echo "📋 다음 단계: TestFlight 배포 워크플로우가 자동으로 시작됩니다."
