name: Release to TestFlight

on:
  pull_request_target:
    types: [opened, ready_for_review]
    branches:
      - 'release'

permissions:
  contents: write
  pull-requests: write

jobs:
  # ===============================================================
  # Job 1: Build Test
  # PR의 코드가 정상적으로 빌드되는지 확인합니다.
  # ===============================================================
  build-test:
    name: 🧪 Build Test
    if: github.head_ref == 'main'
    runs-on: macos-14
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install JS dependencies
        run: npm ci

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: Install CocoaPods
        run: |
          gem install cocoapods -N
          cd ios && pod install --repo-update

      - name: Build iOS (Simulator)
        env:
          RCT_NO_LAUNCH_PACKAGER: '1'
        run: |
          xcodebuild \
            -workspace ios/Wit.xcworkspace \
            -scheme Wit \
            -configuration Release \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone SE (3rd generation)' \
            -derivedDataPath build \
            clean build

  # ===============================================================
  # Job 2: Prepare Release
  # 버전/체인지로그 업데이트, PR 병합 및 Git 태그 생성을 담당합니다.
  # ===============================================================
  prepare-release:
    name: 📦 Prepare Release
    needs: build-test
    runs-on: macos-14
    if: github.head_ref == 'main'
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }} # PAT 토큰 사용
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Request CodeRabbit Summary
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "@coderabbitai review"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Wait for CodeRabbit Summary
        id: detect_summary
        timeout-minutes: 10
        run: |
          for i in {1..120}; do
            echo "[$i/120] Waiting for CodeRabbit summary..."
            PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body --jq .body)
            if [[ "$PR_BODY" == *"Summary by CodeRabbit"* ]]; then
              echo "✅ Summary found!"
              echo "$PR_BODY" > summary_section.html
              echo "summary_found=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 5
          done
          echo "⚠️ Timed out waiting for summary."
          echo "summary_found=false" >> $GITHUB_OUTPUT
          exit 1
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Grant execute permission to scripts
        run: |
          chmod +x .github/scripts/rn_version_manager.sh
          chmod +x .github/scripts/changelog_manager.py

      - name: Increment version and sync native files
        id: versioning
        run: |
          NEW_VERSION=$(./.github/scripts/rn_version_manager.sh increment)
          ./.github/scripts/rn_version_manager.sh sync
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Changelog
        run: |
          python3 .github/scripts/changelog_manager.py update-from-summary
          python3 .github/scripts/changelog_manager.py generate-md
        env:
          VERSION: ${{ steps.versioning.outputs.new_version }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          TIMESTAMP: ${{ github.event.pull_request.updated_at }}

      - name: Commit and push version updates
        run: |
          git add package.json ios/Wit/Info.plist android/app/build.gradle CHANGELOG.json CHANGELOG.md
          if ! git diff --staged --quiet; then
            git commit -m "chore: bump version to v${{ steps.versioning.outputs.new_version }} [skip ci]"
            git push origin main
          else
            echo "No version changes to commit."
          fi

      # PR 병합은 모든 작업이 성공한 후에 수행됩니다 (update-readme job에서)

      - name: Create and push Git tag
        run: |
          git tag "v${{ steps.versioning.outputs.new_version }}"
          git push origin "v${{ steps.versioning.outputs.new_version }}"

      - name: Save Release Notes for deployment
        id: release_notes
        run: |
          # CHANGELOG.md에서 최신 릴리즈 부분만 추출
          awk '/## v${{ steps.versioning.outputs.new_version }}/{flag=1; next}/## v/{flag=0}flag' CHANGELOG.md > release_notes.txt
          cat release_notes.txt

      - name: Upload Release Notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.txt

  # ===============================================================
  # Job 3: Deploy to TestFlight
  # 앱을 빌드하고 TestFlight에 배포합니다.
  # ===============================================================
  deploy-testflight:
    name: 🚀 Deploy to TestFlight
    needs: prepare-release
    runs-on: macos-14
    steps:
      - name: 📋 Job 시작 및 필수 Secrets 검증
        run: |
          echo "🚀 ========================================"
          echo "🚀 Deploy to TestFlight Job 시작"
          echo "🚀 ========================================"
          echo "📅 시작 시간: $(date)"
          echo "🔧 Runner OS: ${{ runner.os }}"
          echo "💻 Runner Architecture: ${{ runner.arch }}"
          echo "📦 필요한 버전 정보: ${{ needs.prepare-release.outputs.new_version }}"
          echo ""
          echo "🔍 필수 GitHub Secrets 검증:"

          # 필수 Secrets 목록
          MISSING_SECRETS=""

                              if [ -z "$APPLE_CERTIFICATE_BASE64" ]; then
            echo "❌ APPLE_CERTIFICATE_BASE64 누락"
            MISSING_SECRETS="$MISSING_SECRETS APPLE_CERTIFICATE_BASE64"
          else
            echo "✅ APPLE_CERTIFICATE_BASE64"
          fi

          if [ -z "$APPLE_CERTIFICATE_PASSWORD" ]; then
            echo "❌ APPLE_CERTIFICATE_PASSWORD 누락"
            MISSING_SECRETS="$MISSING_SECRETS APPLE_CERTIFICATE_PASSWORD"
          else
            echo "✅ APPLE_CERTIFICATE_PASSWORD"
          fi

          if [ -z "$APPLE_PROVISIONING_PROFILE_BASE64" ]; then
            echo "❌ APPLE_PROVISIONING_PROFILE_BASE64 누락"
            MISSING_SECRETS="$MISSING_SECRETS APPLE_PROVISIONING_PROFILE_BASE64"
          else
            echo "✅ APPLE_PROVISIONING_PROFILE_BASE64"
          fi

          if [ -z "$APP_STORE_CONNECT_API_KEY_ID" ]; then
            echo "❌ APP_STORE_CONNECT_API_KEY_ID 누락"
            MISSING_SECRETS="$MISSING_SECRETS APP_STORE_CONNECT_API_KEY_ID"
          else
            echo "✅ APP_STORE_CONNECT_API_KEY_ID"
          fi

          if [ -z "$APP_STORE_CONNECT_ISSUER_ID" ]; then
            echo "❌ APP_STORE_CONNECT_ISSUER_ID 누락"
            MISSING_SECRETS="$MISSING_SECRETS APP_STORE_CONNECT_ISSUER_ID"
          else
            echo "✅ APP_STORE_CONNECT_ISSUER_ID"
          fi

          if [ -z "$APP_STORE_CONNECT_API_KEY_BASE64" ]; then
            echo "❌ APP_STORE_CONNECT_API_KEY_BASE64 누락"
            MISSING_SECRETS="$MISSING_SECRETS APP_STORE_CONNECT_API_KEY_BASE64"
          else
            echo "✅ APP_STORE_CONNECT_API_KEY_BASE64"
          fi

          if [ -z "$APPLE_ID" ]; then
            echo "❌ APPLE_ID 누락"
            MISSING_SECRETS="$MISSING_SECRETS APPLE_ID"
          else
            echo "✅ APPLE_ID: $APPLE_ID"
          fi

          if [ -n "$MISSING_SECRETS" ]; then
            echo ""
            echo "❌ ========================================"
            echo "❌ 누락된 GitHub Secrets:"
            for secret in $MISSING_SECRETS; do
              echo "  - $secret"
            done
            echo "❌ ========================================"
            echo "해결 방법: GitHub 저장소 Settings > Secrets and variables > Actions에서 누락된 Secrets를 추가해주세요."
            exit 1
          fi

          echo ""
          echo "✅ 모든 필수 Secrets가 설정되었습니다!"
          echo "🚀 ========================================"
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
      - name: 📥 소스 코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: release

      - name: ✅ 소스 코드 체크아웃 완료
        run: |
          echo "✅ ========================================"
          echo "✅ 소스 코드 체크아웃 완료"
          echo "✅ ========================================"
          echo "📂 현재 디렉토리: $(pwd)"
          echo "📁 프로젝트 파일 확인:"
          ls -la | head -10
          echo "📦 package.json 버전 확인:"
          node -p "require('./package.json').version"
          echo "✅ ========================================"

      - name: 🔧 Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: ✅ Node.js 설정 완료
        run: |
          echo "✅ ========================================"
          echo "✅ Node.js 설정 완료"
          echo "✅ ========================================"
          echo "📦 Node.js 버전: $(node --version)"
          echo "📦 npm 버전: $(npm --version)"
          echo "✅ ========================================"

      - name: 📦 JavaScript 의존성 설치
        run: |
          echo "📦 ========================================"
          echo "📦 JavaScript 의존성 설치 시작"
          echo "📦 ========================================"
          npm ci
          echo "✅ JavaScript 의존성 설치 완료"
          echo "📊 설치된 패키지 수: $(ls node_modules | wc -l)"
          echo "📦 ========================================"

      - name: 🍎 Xcode 설정
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: ✅ Xcode 설정 완료
        run: |
          echo "✅ ========================================"
          echo "✅ Xcode 설정 완료"
          echo "✅ ========================================"
          echo "🍎 Xcode 버전: $(xcodebuild -version)"
          echo "🍎 사용 가능한 SDK:"
          xcodebuild -showsdks | grep iOS
          echo "✅ ========================================"

      - name: 💎 Ruby 설정
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: ✅ Ruby 설정 완료
        run: |
          echo "✅ ========================================"
          echo "✅ Ruby 설정 완료"
          echo "✅ ========================================"
          echo "💎 Ruby 버전: $(ruby --version)"
          echo "💎 Bundler 버전: $(bundle --version)"
          echo "✅ ========================================"

      - name: 🏗️ CocoaPods 설치
        run: |
          echo "🏗️ ========================================"
          echo "🏗️ CocoaPods 설치 시작"
          echo "🏗️ ========================================"
          gem install cocoapods -N
          echo "📦 CocoaPods 버전: $(pod --version)"
          echo "📂 iOS 디렉토리로 이동하여 Pod 설치..."
          cd ios && pod install --repo-update
          echo "✅ CocoaPods 설치 완료"
          echo "📊 설치된 Pod 수:"
          ls ios/Pods | grep -v "Headers\|Target" | wc -l
          echo "🏗️ ========================================"

      # 인증서 설치 (아카이브 빌드에 필요)
      - name: 🔐 인증서 설치 사전 검증
        run: |
          echo "🔐 ========================================"
          echo "🔐 Apple Distribution 인증서 설치 사전 검증"
          echo "🔐 ========================================"
          echo "📋 인증서 설치 전 키체인 상태:"
          security list-keychains -d user
          echo ""
                    echo "🔍 GitHub Secrets 검증:"
          if [ -z "${{ secrets.APPLE_CERTIFICATE_BASE64 }}" ]; then
            echo "❌ APPLE_CERTIFICATE_BASE64 Secret이 설정되지 않았습니다!"
            exit 1
          else
            echo "✅ APPLE_CERTIFICATE_BASE64 Secret 존재함"
            echo "📊 인증서 데이터 길이: ${#APPLE_CERTIFICATE_BASE64}"
          fi

          if [ -z "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" ]; then
            echo "❌ APPLE_CERTIFICATE_PASSWORD Secret이 설정되지 않았습니다!"
            exit 1
          else
            echo "✅ APPLE_CERTIFICATE_PASSWORD Secret 존재함"
          fi
          echo "🔐 ========================================"
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}

      - name: 🔐 Apple Distribution 인증서 설치
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          keychain: signing_temp
          create-keychain: true

      - name: ✅ 인증서 설치 완료 확인
        run: |
          echo "✅ ========================================"
          echo "✅ Apple Distribution 인증서 설치 완료"
          echo "✅ ========================================"
          echo "🔍 설치된 키체인 목록:"
          security list-keychains -d user
          echo ""
          echo "🔍 설치된 코드 사이닝 인증서:"
          security find-identity -v -p codesigning
          echo ""
          echo "🔍 기본 키체인:"
          security default-keychain
          echo "✅ ========================================"

      # 프로비저닝 프로파일 설치
      - name: 📱 프로비저닝 프로파일 설치
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
        run: |
          echo "📱 ========================================"
          echo "📱 프로비저닝 프로파일 설치 시작"
          echo "📱 ========================================"

          echo "📂 프로파일 디렉토리 생성 중..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "✅ 프로비저닝 프로파일 디렉토리 생성 완료"

          echo "🔍 Base64 프로파일 디코딩 중..."
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          echo "✅ 프로파일 디코딩 완료"
          echo "📊 디코딩된 파일 크기: $(du -h profile.mobileprovision | cut -f1)"

          echo "📋 프로파일 정보 추출 중..."
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< $(security cms -D -i profile.mobileprovision))

          echo "📋 추출된 프로파일 정보:"
          echo "  - UUID: $PROFILE_UUID"
          echo "  - Name: $PROFILE_NAME"

          # CLI 프로젝트용 프로파일인지 확인
          if [[ "$PROFILE_NAME" == *"expo"* ]]; then
            echo "❌ ========================================"
            echo "❌ 에러: Expo 프로파일이 감지되었습니다!"
            echo "❌ ========================================"
            echo "현재 프로파일: $PROFILE_NAME"
            echo ""
            echo "해결 방법:"
            echo "1. Apple Developer Console에서 CLI 프로젝트용 Distribution 프로파일 생성"
            echo "2. 해당 프로파일을 Base64로 인코딩"
            echo "3. GitHub Secrets의 APPLE_PROVISIONING_PROFILE_BASE64 업데이트"
            echo ""
            echo "CLI 프로젝트에는 Expo 프로파일을 사용할 수 없습니다."
            echo "❌ ========================================"
            exit 1
          fi

          echo "📂 프로파일 설치 중..."
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" >> $GITHUB_ENV

          echo "✅ 프로비저닝 프로파일 설치 완료!"
          echo "🔍 설치된 프로파일 확인:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "📱 ========================================"

      - name: 📊 버전 정보 수집
        id: version
        run: |
          echo "📊 ========================================"
          echo "📊 버전 정보 수집 시작"
          echo "📊 ========================================"

          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=$(git rev-list --count HEAD)

          echo "📦 수집된 버전 정보:"
          echo "  - 버전명: $VERSION"
          echo "  - 빌드 번호: $BUILD_NUMBER"
          echo "  - Git 커밋 수: $(git rev-list --count HEAD)"
          echo "  - 현재 브랜치: $(git branch --show-current)"
          echo "  - 최신 커밋: $(git log -1 --format='%h %s')"

          echo "version_name=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "📊 ========================================"

      - name: 🔍 빌드 환경 디버깅
        run: |
          echo "🔍 ========================================"
          echo "🔍 빌드 환경 디버깅 시작"
          echo "🔍 ========================================"
          echo "🖥️ Runner 정보:"
          echo "  - Temp 디렉토리: ${{ runner.temp }}"
          echo "  - 작업 디렉토리: $(pwd)"
          echo "  - 디스크 사용량: $(df -h . | tail -1)"

          echo ""
          echo "🔐 키체인 상태:"
          echo "  - 현재 키체인 목록:"
          security list-keychains -d user
          echo "  - 기본 키체인:"
          security default-keychain

          echo ""
          echo "📱 프로비저닝 프로파일 상태:"
          echo "  - 환경 변수: $PROVISIONING_PROFILE_SPECIFIER"
          echo "  - 설치된 프로파일 수: $(ls ~/Library/MobileDevice/Provisioning\ Profiles/ | wc -l)"

          echo "🔍 ========================================"

      - name: 🏗️ iOS 아카이브 빌드
        run: |
          echo "🏗️ ========================================"
          echo "🏗️ iOS 아카이브 빌드 시작"
          echo "🏗️ ========================================"

          echo "🔍 빌드 전 환경 확인:"
          echo "  - 설치된 키체인:"
          security list-keychains -d user
          echo "  - 코드 사이닝 인증서:"
          security find-identity -v -p codesigning

          echo ""
          echo "📋 빌드 설정 정보:"
          echo "  - 프로비저닝 프로파일: ${{ env.PROVISIONING_PROFILE_SPECIFIER }}"
          echo "  - 앱 버전: ${{ steps.version.outputs.version_name }}"
          echo "  - 빌드 번호: ${{ steps.version.outputs.build_number }}"
          echo "  - 아카이브 경로: build/Wit.xcarchive"

          echo ""
          echo "🚀 xcodebuild 아카이브 명령 실행 중..."
          echo "🏗️ ========================================"

          xcodebuild \
            -workspace ios/Wit.xcworkspace \
            -scheme Wit \
            -configuration Release \
            -archivePath build/Wit.xcarchive \
            -allowProvisioningUpdates \
            clean archive \
            CURRENT_PROJECT_VERSION=${{ steps.version.outputs.build_number }} \
            MARKETING_VERSION=${{ steps.version.outputs.version_name }} \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="${{ env.PROVISIONING_PROFILE_SPECIFIER }}"

          echo "🏗️ ========================================"
          echo "✅ 아카이브 빌드 완료!"
          echo "🏗️ ========================================"
          echo "📁 생성된 아카이브 확인:"
          if [ -d "build/Wit.xcarchive" ]; then
            echo "  ✅ 아카이브 파일 존재함"
            echo "  📊 아카이브 크기: $(du -sh build/Wit.xcarchive | cut -f1)"
            echo "  📂 아카이브 내용:"
            ls -la build/Wit.xcarchive/
          else
            echo "  ❌ 아카이브 파일이 생성되지 않았습니다!"
            exit 1
          fi
          echo "🏗️ ========================================"

      - name: 🔑 App Store Connect API Key 설정
        run: |
          echo "🔑 ========================================"
          echo "🔑 App Store Connect API Key 설정 시작"
          echo "🔑 ========================================"

          echo "📂 API Key 디렉토리 생성 중..."
          mkdir -p ~/.appstoreconnect/private_keys

          echo "🔓 API Key 디코딩 및 저장 중..."
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

          API_KEY_PATH="$HOME/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8"
          echo "APP_STORE_CONNECT_API_KEY_PATH=$API_KEY_PATH" >> $GITHUB_ENV

          echo "✅ API Key 설정 완료!"
          echo "📁 API Key 파일 확인:"
          echo "  - 경로: $API_KEY_PATH"
          echo "  - 파일 존재: $([ -f "$API_KEY_PATH" ] && echo "✅ 예" || echo "❌ 아니오")"
          echo "  - 파일 크기: $([ -f "$API_KEY_PATH" ] && du -h "$API_KEY_PATH" | cut -f1 || echo "N/A")"
          echo "🔑 ========================================"

      - name: 📦 Fastlane 사전 검증
        run: |
          echo "📦 ========================================"
          echo "📦 Fastlane 사전 검증 시작"
          echo "📦 ========================================"

          echo "📂 iOS 디렉토리로 이동 중..."
          cd ios

          echo "🔍 Fastlane 설정 파일 확인:"
          if [ -f "fastlane/Fastfile" ]; then
            echo "  ✅ Fastfile 존재함"
          else
            echo "  ❌ Fastfile이 존재하지 않습니다!"
            exit 1
          fi

          if [ -f "fastlane/Appfile" ]; then
            echo "  ✅ Appfile 존재함"
          else
            echo "  ❌ Appfile이 존재하지 않습니다!"
            exit 1
          fi

          if [ -f "Gemfile" ]; then
            echo "  ✅ Gemfile 존재함"
          else
            echo "  ❌ Gemfile이 존재하지 않습니다!"
            exit 1
          fi

          echo ""
          echo "🔍 Bundler 및 Fastlane 상태 확인:"
          echo "  - Bundler 버전: $(bundle --version)"
          echo "  - Fastlane 설치 확인: $(bundle exec fastlane --version | head -1)"

          echo ""
          echo "🔍 사용 가능한 Fastlane Lane 확인:"
          bundle exec fastlane lanes

          echo "📦 ========================================"

      - name: 📦 Fastlane IPA 내보내기
        run: |
          echo "📦 ========================================"
          echo "📦 Fastlane IPA 내보내기 시작"
          echo "📦 ========================================"

          echo "📂 iOS 디렉토리로 이동 중..."
          cd ios

          echo "🔧 환경 변수 설정 중..."
          export VERSION_NAME="${{ steps.version.outputs.version_name }}"
          export BUILD_NUMBER="${{ steps.version.outputs.build_number }}"
          export PROVISIONING_PROFILE_SPECIFIER="${{ env.PROVISIONING_PROFILE_SPECIFIER }}"
          export APP_STORE_CONNECT_API_KEY_PATH="${{ env.APP_STORE_CONNECT_API_KEY_PATH }}"
          export APPLE_ID="${{ secrets.APPLE_ID }}"

          echo "🔍 설정된 환경 변수 확인:"
          echo "  - VERSION_NAME: $VERSION_NAME"
          echo "  - BUILD_NUMBER: $BUILD_NUMBER"
          echo "  - PROVISIONING_PROFILE_SPECIFIER: $PROVISIONING_PROFILE_SPECIFIER"
          echo "  - API_KEY_PATH: $APP_STORE_CONNECT_API_KEY_PATH"
          echo "  - APPLE_ID: $APPLE_ID"

          echo ""
          echo "📋 Fastlane 실행 전 최종 확인:"
          echo "  - 아카이브 파일 존재: $([ -d "../build/Wit.xcarchive" ] && echo "✅ 예" || echo "❌ 아니오")"
          if [ ! -d "../build/Wit.xcarchive" ]; then
            echo "❌ 아카이브 파일이 존재하지 않습니다. Fastlane을 실행할 수 없습니다."
            exit 1
          fi

          echo ""
          echo "🚀 Fastlane build_and_export 실행 중..."
          echo "📦 ========================================"

          bundle exec fastlane build_and_export

          echo "📦 ========================================"
          echo "✅ Fastlane IPA 내보내기 완료!"
          echo "📦 ========================================"
          echo "📁 생성된 IPA 파일 확인:"
          if [ -d "../build/ipa" ]; then
            echo "  ✅ IPA 디렉토리 존재함"
            echo "  📊 디렉토리 내용:"
            ls -la ../build/ipa/
            if [ -f "../build/ipa/Wit.ipa" ]; then
              echo "  ✅ IPA 파일 생성 성공"
              echo "  📊 IPA 파일 크기: $(du -h ../build/ipa/Wit.ipa | cut -f1)"
            else
              echo "  ❌ IPA 파일이 생성되지 않았습니다!"
              exit 1
            fi
          else
            echo "  ❌ IPA 디렉토리가 생성되지 않았습니다!"
            exit 1
          fi
          echo "📦 ========================================"

      - name: Download Release Notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Read changelog file for TestFlight
        id: read_changelog
        run: |
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Verify IPA before Upload
        run: |
          echo "🔍 TestFlight 업로드 전 IPA 파일 확인..."
          IPA_PATH="build/ipa/Wit.ipa"

          if [ ! -f "$IPA_PATH" ]; then
            echo "❌ IPA 파일이 존재하지 않습니다: $IPA_PATH"
            echo "build/ipa 디렉토리 내용:"
            ls -la build/ipa/ || echo "build/ipa 디렉토리가 존재하지 않습니다"
            exit 1
          fi

          echo "✅ IPA 파일 확인됨: $IPA_PATH"
          echo "파일 크기: $(du -h "$IPA_PATH" | cut -f1)"

      - name: 🚀 Fastlane TestFlight 업로드
        run: |
          echo "🚀 ========================================"
          echo "🚀 Fastlane TestFlight 업로드 시작"
          echo "🚀 ========================================"

          echo "📂 iOS 디렉토리로 이동 중..."
          cd ios

          echo "🔧 환경 변수 설정 중..."
          export CHANGELOG="${{ steps.read_changelog.outputs.changelog }}"
          export APP_STORE_CONNECT_API_KEY_PATH="${{ env.APP_STORE_CONNECT_API_KEY_PATH }}"
          export APPLE_ID="${{ secrets.APPLE_ID }}"

          echo "🔍 업로드 준비 상태 확인:"
          echo "  - IPA 파일 존재: $([ -f "../build/ipa/Wit.ipa" ] && echo "✅ 예" || echo "❌ 아니오")"
          echo "  - API Key 파일 존재: $([ -f "$APP_STORE_CONNECT_API_KEY_PATH" ] && echo "✅ 예" || echo "❌ 아니오")"
          echo "  - Apple ID: $APPLE_ID"

          echo ""
          echo "📝 릴리즈 노트 (변경사항):"
          echo "----------------------------------------"
          echo "$CHANGELOG"
          echo "----------------------------------------"

          echo ""
          echo "🚀 Fastlane upload_testflight 실행 중..."
          echo "🚀 ========================================"

          bundle exec fastlane upload_testflight

          echo "🚀 ========================================"
          echo "✅ Fastlane TestFlight 업로드 완료!"
          echo "🚀 ========================================"

      - name: 🎉 배포 완료 로그
        run: |
          echo "🎉 ========================================"
          echo "🎉 TestFlight 배포 완료!"
          echo "🎉 ========================================"
          echo "📱 앱이 TestFlight에 성공적으로 업로드되었습니다."
          echo "📅 배포 완료 시간: $(date)"
          echo "📦 배포된 버전: ${{ steps.version.outputs.version_name }}"
          echo "🔢 빌드 번호: ${{ steps.version.outputs.build_number }}"
          echo ""
          echo "📋 다음 단계:"
          echo "  1. TestFlight에서 빌드 처리 완료 대기"
          echo "  2. 내부 테스터에게 알림 발송"
          echo "  3. 테스트 진행 후 App Store 출시 준비"
          echo "🎉 ========================================"

  # ===============================================================
  # Job 4: Update README
  # 배포 완료 후 main 브랜치의 README 파일을 업데이트합니다.
  # ===============================================================
  update-readme:
    name: 📝 Update README
    needs: deploy-testflight
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get latest version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "latest_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update README.md
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d')
          VERSION_TEXT="v${{ steps.version.outputs.latest_version }} ($TIMESTAMP)"
          # README에서 버전 라인을 찾아 업데이트 (다양한 형식 지원)
          sed -i -E "s/^(##\\s*(최신|Current|Recent|Latest)?\\s*버전\\s*:\\s*).*/\\1${VERSION_TEXT}/i" README.md

      - name: Commit and push README update
        run: |
          git add README.md
          if ! git diff --staged --quiet; then
            git commit -m "docs: update README with version v${{ steps.version.outputs.latest_version }} [skip ci]"
            git push origin main
          else
            echo "No README changes to commit."
          fi

      - name: Merge PR to release branch
        run: |
          echo "🎉 모든 작업이 성공했습니다. PR을 병합합니다."
          gh pr merge ${{ github.event.pull_request.number }} --squash --admin
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
