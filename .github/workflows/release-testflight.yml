name: Release to TestFlight

on:
  pull_request_target:
    types: [opened, ready_for_review]
    branches:
      - 'release'

permissions:
  contents: write
  pull-requests: write

jobs:
  # ===============================================================
  # Job 1: Build Test
  # PR의 코드가 정상적으로 빌드되는지 확인합니다.
  # ===============================================================
  build-test:
    name: 🧪 Build Test
    if: github.head_ref == 'main'
    runs-on: macos-14
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install JS dependencies
        run: npm ci

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: Install CocoaPods
        run: |
          gem install cocoapods -N
          cd ios && pod install --repo-update

      - name: Build iOS (Simulator)
        env:
          RCT_NO_LAUNCH_PACKAGER: '1'
        run: |
          xcodebuild \
            -workspace ios/Wit.xcworkspace \
            -scheme Wit \
            -configuration Release \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone SE (3rd generation)' \
            -derivedDataPath build \
            clean build

  # ===============================================================
  # Job 2: Prepare Release
  # 버전/체인지로그 업데이트, PR 병합 및 Git 태그 생성을 담당합니다.
  # ===============================================================
  prepare-release:
    name: 📦 Prepare Release
    needs: build-test
    runs-on: macos-14
    if: github.head_ref == 'main'
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }} # PAT 토큰 사용
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Request CodeRabbit Summary
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "@coderabbitai review"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for CodeRabbit Summary
        id: detect_summary
        timeout-minutes: 10
        run: |
          for i in {1..120}; do
            echo "[$i/120] Waiting for CodeRabbit summary..."
            PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body --jq .body)
            if [[ "$PR_BODY" == *"Summary by CodeRabbit"* ]]; then
              echo "✅ Summary found!"
              echo "$PR_BODY" > summary_section.html
              echo "summary_found=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 5
          done
          echo "⚠️ Timed out waiting for summary."
          echo "summary_found=false" >> $GITHUB_OUTPUT
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Grant execute permission to scripts
        run: |
          chmod +x .github/scripts/rn_version_manager.sh
          chmod +x .github/scripts/changelog_manager.py

      - name: Increment version and sync native files
        id: versioning
        run: |
          NEW_VERSION=$(./.github/scripts/rn_version_manager.sh increment)
          ./.github/scripts/rn_version_manager.sh sync
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Changelog
        run: |
          python3 .github/scripts/changelog_manager.py update-from-summary
          python3 .github/scripts/changelog_manager.py generate-md
        env:
          VERSION: ${{ steps.versioning.outputs.new_version }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          TIMESTAMP: ${{ github.event.pull_request.updated_at }}

      - name: Commit and push version updates
        run: |
          git add package.json ios/Wit/Info.plist android/app/build.gradle CHANGELOG.json CHANGELOG.md
          if ! git diff --staged --quiet; then
            git commit -m "chore: bump version to v${{ steps.versioning.outputs.new_version }} [skip ci]"
            git push origin main
          else
            echo "No version changes to commit."
          fi

      # PR 병합은 모든 작업이 성공한 후에 수행됩니다 (update-readme job에서)

      - name: Create and push Git tag
        run: |
          git tag "v${{ steps.versioning.outputs.new_version }}"
          git push origin "v${{ steps.versioning.outputs.new_version }}"

      - name: Save Release Notes for deployment
        id: release_notes
        run: |
          # CHANGELOG.md에서 최신 릴리즈 부분만 추출
          awk '/## v${{ steps.versioning.outputs.new_version }}/{flag=1; next}/## v/{flag=0}flag' CHANGELOG.md > release_notes.txt
          cat release_notes.txt

      - name: Upload Release Notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.txt

  # ===============================================================
  # Job 3: Deploy to TestFlight
  # 앱을 빌드하고 TestFlight에 배포합니다.
  # ===============================================================
  deploy-testflight:
    name: 🚀 Deploy to TestFlight
    needs: prepare-release
    runs-on: macos-14
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install JS dependencies
        run: npm ci

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: Install CocoaPods
        run: |
          gem install cocoapods -N
          cd ios && pod install --repo-update

      # Fastlane 사용 시 인증서/프로파일 설정은 Fastlane이 자동 처리
      - name: Setup Fastlane Match (Alternative)
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
        run: |
          echo "📱 프로비저닝 프로파일 설치 시작..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "✅ 프로비저닝 프로파일 디렉토리 생성 완료"

          echo "🔍 Base64 프로파일 디코딩 중..."
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          echo "✅ 프로파일 디코딩 완료"

          echo "📋 프로파일 정보 추출 중..."
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< $(security cms -D -i profile.mobileprovision))

          echo "📋 프로파일 정보:"
          echo "  - UUID: $PROFILE_UUID"
          echo "  - Name: $PROFILE_NAME"

          # CLI 프로젝트용 프로파일인지 확인
          if [[ "$PROFILE_NAME" == *"expo"* ]]; then
            echo "❌ 에러: Expo 프로파일이 감지되었습니다!"
            echo "현재 프로파일: $PROFILE_NAME"
            echo ""
            echo "해결 방법:"
            echo "1. Apple Developer Console에서 CLI 프로젝트용 Distribution 프로파일 생성"
            echo "2. 해당 프로파일을 Base64로 인코딩"
            echo "3. GitHub Secrets의 APPLE_PROVISIONING_PROFILE_BASE64 업데이트"
            echo ""
            echo "CLI 프로젝트에는 Expo 프로파일을 사용할 수 없습니다."
            exit 1
          fi

          echo "📂 프로파일 설치 중..."
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
          echo "PROVISIONING_PROFILE_SPECIFIER=$PROFILE_NAME" >> $GITHUB_ENV

          echo "✅ 프로비저닝 프로파일 설치 완료!"
          echo "🔍 설치된 프로파일 확인:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Get Version Info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=$(git rev-list --count HEAD)
          echo "version_name=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Debug Keychain and Environment
        run: |
          echo "🔍 환경 디버깅 시작..."
          echo "Runner temp directory: ${{ runner.temp }}"
          echo "임시 디렉토리 내용:"
          ls -la ${{ runner.temp }}/
          echo ""
          echo "현재 키체인 목록:"
          security list-keychains -d user
          echo ""
          echo "기본 키체인:"
          security default-keychain
          echo ""

      - name: Build and Archive iOS
        run: |
          echo "🏗️ iOS 아카이브 빌드 시작..."

          # 실제 생성된 키체인 찾기
          echo "🔍 생성된 키체인 찾는 중..."
          security list-keychains -d user

          # Apple-Actions가 생성한 키체인 경로 찾기 (로그에서 확인된 경로 사용)
          KEYCHAIN_PATH="/Users/runner/Library/Keychains/signing_temp.keychain-db"

          if [ ! -f "$KEYCHAIN_PATH" ]; then
            echo "❌ signing_temp 키체인이 존재하지 않습니다!"
            echo "사용 가능한 키체인 목록:"
            security list-keychains -d user
            
            # 다른 가능한 키체인 찾기
            ALTERNATIVE_KEYCHAIN=$(security list-keychains -d user | grep -v "login.keychain" | head -1 | tr -d '"' | xargs)
            if [ -n "$ALTERNATIVE_KEYCHAIN" ] && [ -f "$ALTERNATIVE_KEYCHAIN" ]; then
              KEYCHAIN_PATH="$ALTERNATIVE_KEYCHAIN"
              echo "✅ 대안 키체인 사용: $KEYCHAIN_PATH"
            else
              echo "❌ 사용 가능한 키체인을 찾을 수 없습니다"
              exit 1
            fi
          fi

          echo "✅ 키체인 파일 확인됨: $KEYCHAIN_PATH"

          # 키체인 설정
          echo "🔐 키체인 설정 중..."
          security list-keychains -d user -s "$KEYCHAIN_PATH" login.keychain
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "" "$KEYCHAIN_PATH"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN_PATH"

          echo "✅ 키체인 설정 완료"

          # 코드 사이닝 ID 확인
          echo "🔍 코드 사이닝 ID 확인 중..."
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

          echo "📱 프로비저닝 프로파일: ${{ env.PROVISIONING_PROFILE_SPECIFIER }}"
          echo "📦 버전: ${{ steps.version.outputs.version_name }}"
          echo "🔢 빌드 번호: ${{ steps.version.outputs.build_number }}"

          echo "🚀 xcodebuild 아카이브 시작..."
          xcodebuild \
            -workspace ios/Wit.xcworkspace \
            -scheme Wit \
            -configuration Release \
            -archivePath build/Wit.xcarchive \
            -allowProvisioningUpdates \
            clean archive \
            CURRENT_PROJECT_VERSION=${{ steps.version.outputs.build_number }} \
            MARKETING_VERSION=${{ steps.version.outputs.version_name }} \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="${{ env.PROVISIONING_PROFILE_SPECIFIER }}"

          echo "✅ 아카이브 빌드 완료!"

      - name: Setup App Store Connect API Key
        run: |
          echo "🔑 App Store Connect API Key 설정 중..."
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          echo "APP_STORE_CONNECT_API_KEY_PATH=$HOME/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8" >> $GITHUB_ENV
          echo "✅ API Key 설정 완료"

      - name: Export IPA with Fastlane
        run: |
          echo "📦 Fastlane을 사용한 IPA 내보내기 시작..."
          cd ios

          # 환경 변수 설정
          export VERSION_NAME="${{ steps.version.outputs.version_name }}"
          export BUILD_NUMBER="${{ steps.version.outputs.build_number }}"
          export PROVISIONING_PROFILE_SPECIFIER="${{ env.PROVISIONING_PROFILE_SPECIFIER }}"
          export APP_STORE_CONNECT_API_KEY_PATH="${{ env.APP_STORE_CONNECT_API_KEY_PATH }}"
          export APPLE_ID="${{ secrets.APPLE_ID }}"

          echo "🔍 환경 변수 확인:"
          echo "  - VERSION_NAME: $VERSION_NAME"
          echo "  - BUILD_NUMBER: $BUILD_NUMBER"
          echo "  - PROVISIONING_PROFILE_SPECIFIER: $PROVISIONING_PROFILE_SPECIFIER"
          echo "  - API_KEY_PATH: $APP_STORE_CONNECT_API_KEY_PATH"

          # Fastlane 실행
          bundle exec fastlane build_and_export

          echo "✅ Fastlane IPA 내보내기 완료!"
          echo "생성된 IPA 파일:"
          ls -la ../build/ipa/

      - name: Download Release Notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Read changelog file for TestFlight
        id: read_changelog
        run: |
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Verify IPA before Upload
        run: |
          echo "🔍 TestFlight 업로드 전 IPA 파일 확인..."
          IPA_PATH="build/ipa/Wit.ipa"

          if [ ! -f "$IPA_PATH" ]; then
            echo "❌ IPA 파일이 존재하지 않습니다: $IPA_PATH"
            echo "build/ipa 디렉토리 내용:"
            ls -la build/ipa/ || echo "build/ipa 디렉토리가 존재하지 않습니다"
            exit 1
          fi

          echo "✅ IPA 파일 확인됨: $IPA_PATH"
          echo "파일 크기: $(du -h "$IPA_PATH" | cut -f1)"

      - name: Upload to TestFlight with Fastlane
        run: |
          echo "🚀 Fastlane을 사용한 TestFlight 업로드 시작..."
          cd ios

          # 환경 변수 설정
          export CHANGELOG="${{ steps.read_changelog.outputs.changelog }}"
          export APP_STORE_CONNECT_API_KEY_PATH="${{ env.APP_STORE_CONNECT_API_KEY_PATH }}"
          export APPLE_ID="${{ secrets.APPLE_ID }}"

          echo "📝 변경사항:"
          echo "$CHANGELOG"

          # Fastlane 실행
          bundle exec fastlane upload_testflight

          echo "✅ Fastlane TestFlight 업로드 완료!"

      - name: TestFlight Upload Complete
        run: |
          echo "✅ TestFlight 업로드 완료!"
          echo "앱이 TestFlight에 성공적으로 업로드되었습니다."

  # ===============================================================
  # Job 4: Update README
  # 배포 완료 후 main 브랜치의 README 파일을 업데이트합니다.
  # ===============================================================
  update-readme:
    name: 📝 Update README
    needs: deploy-testflight
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get latest version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "latest_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update README.md
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d')
          VERSION_TEXT="v${{ steps.version.outputs.latest_version }} ($TIMESTAMP)"
          # README에서 버전 라인을 찾아 업데이트 (다양한 형식 지원)
          sed -i -E "s/^(##\\s*(최신|Current|Recent|Latest)?\\s*버전\\s*:\\s*).*/\\1${VERSION_TEXT}/i" README.md

      - name: Commit and push README update
        run: |
          git add README.md
          if ! git diff --staged --quiet; then
            git commit -m "docs: update README with version v${{ steps.version.outputs.latest_version }} [skip ci]"
            git push origin main
          else
            echo "No README changes to commit."
          fi

      - name: Merge PR to release branch
        run: |
          echo "🎉 모든 작업이 성공했습니다. PR을 병합합니다."
          gh pr merge ${{ github.event.pull_request.number }} --squash --admin
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
