name: Release to TestFlight

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - 'release'

permissions:
  contents: write
  pull-requests: write

jobs:
  # ===============================================================
  # Job 1: Build Test
  # PR의 코드가 정상적으로 빌드되는지 확인합니다.
  # ===============================================================
  build-test:
    name: 🧪 Build Test
    if: github.head_ref == 'main'
    runs-on: macos-14
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install JS dependencies
        run: npm ci

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: Install CocoaPods
        run: cd ios && pod install --repo-update

      - name: Build iOS (Simulator)
        env:
          RCT_NO_LAUNCH_PACKAGER: '1'
        run: |
          xcodebuild \
            -workspace ios/Wit.xcworkspace \
            -scheme Wit \
            -configuration Release \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            -derivedDataPath build \
            clean build

  # ===============================================================
  # Job 2: Prepare Release
  # 버전/체인지로그 업데이트, PR 병합 및 Git 태그 생성을 담당합니다.
  # ===============================================================
  prepare-release:
    name: 📦 Prepare Release
    needs: build-test
    runs-on: ubuntu-latest
    if: github.head_ref == 'main'
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }} # PAT 토큰 사용
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Request CodeRabbit Summary
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "@coderabbitai review"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for CodeRabbit Summary
        id: detect_summary
        timeout-minutes: 10
        run: |
          for i in {1..120}; do
            echo "[$i/120] Waiting for CodeRabbit summary..."
            PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body --jq .body)
            if [[ "$PR_BODY" == *"Summary by CodeRabbit"* ]]; then
              echo "✅ Summary found!"
              echo "$PR_BODY" > summary_section.html
              echo "summary_found=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 5
          done
          echo "⚠️ Timed out waiting for summary."
          echo "summary_found=false" >> $GITHUB_OUTPUT
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Grant execute permission to scripts
        run: |
          chmod +x .github/scripts/rn_version_manager.sh
          chmod +x .github/scripts/changelog_manager.py

      - name: Increment version and sync native files
        id: versioning
        run: |
          NEW_VERSION=$(./.github/scripts/rn_version_manager.sh increment)
          ./.github/scripts/rn_version_manager.sh sync
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Changelog
        run: |
          python3 .github/scripts/changelog_manager.py update-from-summary
          python3 .github/scripts/changelog_manager.py generate-md
        env:
          VERSION: ${{ steps.versioning.outputs.new_version }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          TIMESTAMP: ${{ github.event.pull_request.updated_at }}

      - name: Commit and push version updates
        run: |
          git add package.json ios/Wit/Info.plist android/app/build.gradle CHANGELOG.json CHANGELOG.md
          if ! git diff --staged --quiet; then
            git commit -m "chore: bump version to v${{ steps.versioning.outputs.new_version }} [skip ci]"
            git push origin main
          else
            echo "No version changes to commit."
          fi

      - name: Merge PR to release branch
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --squash --admin
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create and push Git tag
        run: |
          git tag "v${{ steps.versioning.outputs.new_version }}"
          git push origin "v${{ steps.versioning.outputs.new_version }}"

      - name: Save Release Notes for deployment
        id: release_notes
        run: |
          # CHANGELOG.md에서 최신 릴리즈 부분만 추출
          awk '/## v${{ steps.versioning.outputs.new_version }}/{flag=1; next}/## v/{flag=0}flag' CHANGELOG.md > release_notes.txt
          cat release_notes.txt

      - name: Upload Release Notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.txt

  # ===============================================================
  # Job 3: Deploy to TestFlight
  # 앱을 빌드하고 TestFlight에 배포합니다.
  # ===============================================================
  deploy-testflight:
    name: 🚀 Deploy to TestFlight
    needs: prepare-release
    runs-on: macos-14
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: release

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install JS dependencies
        run: npm ci

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'

      - name: Install CocoaPods
        run: cd ios && pod install --repo-update

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Install Provisioning Profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision

      - name: Get Version Info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=$(git rev-list --count HEAD)
          echo "version_name=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Build and Archive iOS
        run: |
          xcodebuild \
            -workspace ios/Wit.xcworkspace \
            -scheme Wit \
            -configuration Release \
            -archivePath build/Wit.xcarchive \
            clean archive \
            "OTHER_CODE_SIGN_FLAGS=--keychain-path ${{ runner.temp }}/app-signing.keychain-db" \
            CURRENT_PROJECT_VERSION=${{ steps.version.outputs.build_number }} \
            MARKETING_VERSION=${{ steps.version.outputs.version_name }}

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Wit.xcarchive \
            -exportPath build/ipa \
            -exportOptionsPlist ios/exportOptions.plist

      - name: Download Release Notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v2
        with:
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-content: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
          app-path: 'build/ipa/Wit.ipa'
          changelog: ${{ fromJSON(needs.prepare-release.outputs.release_notes_json) }}

  # ===============================================================
  # Job 4: Update README
  # 배포 완료 후 main 브랜치의 README 파일을 업데이트합니다.
  # ===============================================================
  update-readme:
    name: 📝 Update README
    needs: deploy-testflight
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get latest version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "latest_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update README.md
        run: |
          VERSION_TEXT="v${{ steps.version.outputs.latest_version }} ($TIMESTAMP)"
          TIMESTAMP=$(date +'%Y-%m-%d')
          # README에서 버전 라인을 찾아 업데이트 (다양한 형식 지원)
          sed -i -E "s/^(##\s*(최신|Current|Recent|Latest)?\s*버전\s*:\s*).*/\1${VERSION_TEXT}/i" README.md

      - name: Commit and push README update
        run: |
          git add README.md
          if ! git diff --staged --quiet; then
            git commit -m "docs: update README with version v${{ steps.version.outputs.latest_version }} [skip ci]"
            git push origin main
          else
            echo "No README changes to commit."
          fi
