# ===================================================================
# Wit 프로젝트 자동 체인지로그 관리 워크플로우
# ===================================================================
#
# 이 워크플로우는 main -> release PR이 생성될 때 CodeRabbit AI의 리뷰를
# 자동으로 감지하고 파싱하여 CHANGELOG.json과 CHANGELOG.md를 업데이트합니다.
#
# 작동 방식:
# 1. main -> release PR 생성 시 트리거
# 2. iOS 빌드 테스트 먼저 실행 (빠른 피드백)
# 3. 버전 자동 증가 및 네이티브 파일 동기화
# 4. CodeRabbit Summary가 생성될 때까지 최대 10분 대기
# 5. Summary 내용을 파싱하여 CHANGELOG 파일들 업데이트
# 6. PREVIOUS_CHANGES.md 및 README.md 자동 업데이트
# 7. PR 자동 머지 후 TestFlight 배포 트리거
#
# 지원 기능:
# - React Native 프로젝트 버전 관리 (package.json, Info.plist, build.gradle)
# - CodeRabbit Summary의 실시간 파싱 및 카테고리 분류
# - JSON 및 Markdown 형식의 체인지로그 자동 생성
# - README.md 및 PREVIOUS_CHANGES.md 자동 업데이트
# - PR 자동 머지 후 TestFlight 배포 파이프라인 트리거
#
# ===================================================================

name: 📝 CHANGELOG Update

on:
  workflow_run:
    workflows: ['🧪 Build Test']
    types:
      - completed

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: CodeRabbit Summary 감지
  detect-summary:
    name: 📋 CodeRabbit Summary 감지
    runs-on: macos-14
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      summary_found: ${{ steps.detect_summary.outputs.summary_found }}
      pr_number: ${{ steps.get_pr.outputs.pr_number }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get PR Number from workflow_run
        id: get_pr
        run: |
          # workflow_run에서 PR 번호 추출
          PR_NUMBER=$(gh api repos/${{ github.repository }}/pulls \
            --jq '.[] | select(.head.sha == "${{ github.event.workflow_run.head_sha }}") | .number' \
            | head -1)

          if [ -z "$PR_NUMBER" ]; then
            echo "❌ PR 번호를 찾을 수 없습니다"
            exit 1
          fi

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "✅ PR 번호: $PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Grant execute permission to scripts
        run: |
          echo "📋 스크립트 파일 권한 설정 중..."
          if [ -f ".github/scripts/rn_version_manager.sh" ]; then
            chmod +x .github/scripts/rn_version_manager.sh
            echo "✅ rn_version_manager.sh 권한 설정 완료"
          else
            echo "❌ rn_version_manager.sh 파일을 찾을 수 없습니다!"
            exit 1
          fi

      - name: Request CodeRabbit Summary
        run: |
          echo "🤖 CodeRabbit에게 리뷰 요청 중..."
          gh pr comment ${{ steps.get_pr.outputs.pr_number }} --body "@coderabbitai review"
          echo "✅ CodeRabbit 리뷰 요청 완료"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Wait for CodeRabbit Summary (Enhanced Detection)
        id: detect_summary
        continue-on-error: true
        timeout-minutes: 10
        run: |
          PR_NUMBER="${{ steps.get_pr.outputs.pr_number }}"
          MAX_ATTEMPTS=120  # 10분 = 120 * 5초
          ATTEMPT=0

          echo "🔍 PR #$PR_NUMBER에서 CodeRabbit Summary 업데이트 감지 시작..."
          echo "최대 대기 시간: 10분 (5초마다 체크)"

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "[$ATTEMPT/$MAX_ATTEMPTS] CodeRabbit Summary 확인 중... ($(date '+%H:%M:%S'))"
            
            # GitHub API로 PR HTML 가져오기
            curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.html" \
                 "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}" \
                 > pr_content.html
            
            # "No description provided" 체크
            if grep -q "No description provided" pr_content.html; then
              echo "❌ 아직 'No description provided' 상태입니다"
            elif grep -q "Summary by CodeRabbit" pr_content.html; then
              echo "✅ CodeRabbit Summary 발견! 파싱을 시작합니다"
              echo "summary_found=true" >> $GITHUB_OUTPUT
              break
            else
              echo "⏳ CodeRabbit Summary 아직 없음"
            fi
            
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              sleep 5
            fi
          done

          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "⚠️ 10분 대기 후에도 CodeRabbit Summary를 찾을 수 없습니다"
            echo "summary_found=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Upload PR content for next job
        if: steps.detect_summary.outputs.summary_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: pr-content-${{ steps.get_pr.outputs.pr_number }}
          path: pr_content.html
          retention-days: 1

  # Job 2: 버전 업데이트 및 CHANGELOG 생성
  update-changelog:
    name: 📝 버전 업데이트 및 CHANGELOG 생성
    runs-on: macos-14
    needs: detect-summary
    if: needs.detect-summary.outputs.summary_found == 'true'
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Download PR content
        uses: actions/download-artifact@v4
        with:
          name: pr-content-${{ needs.detect-summary.outputs.pr_number }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Grant execute permission to scripts
        run: |
          echo "📋 스크립트 파일 권한 설정 중..."
          if [ -f ".github/scripts/rn_version_manager.sh" ]; then
            chmod +x .github/scripts/rn_version_manager.sh
            echo "✅ rn_version_manager.sh 권한 설정 완료"
          else
            echo "❌ rn_version_manager.sh 파일을 찾을 수 없습니다!"
            exit 1
          fi

      - name: Increment version and sync native files
        id: versioning
        run: |
          echo "📦 버전 업데이트 시작..."

          # changelog-update.yml 방식으로 간단하게 처리
          NEW_VERSION=$(./.github/scripts/rn_version_manager.sh increment)
          ./.github/scripts/rn_version_manager.sh sync

          echo "📦 새 버전: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          echo "✅ 버전 업데이트 완료: $NEW_VERSION"

      - name: Enhanced CodeRabbit Summary Parsing and CHANGELOG Update
        run: |
          PR_NUMBER="${{ needs.detect-summary.outputs.pr_number }}"
          VERSION="${{ steps.versioning.outputs.new_version }}"
          TODAY=$(date '+%Y-%m-%d')
          TIMESTAMP=$(date '+%Y-%m-%dT%H:%M:%SZ')

          echo "📝 CodeRabbit Summary 강화된 파싱 시작..."
          echo "📋 버전 정보: v$VERSION (PR #$PR_NUMBER)"

          # Summary 섹션 추출 (개선된 방식)
          echo "🔍 PR HTML에서 CodeRabbit Summary 추출 중..."

          # 1. HTML에서 Summary 섹션 추출
          sed -n '/<h2[^>]*>Summary by CodeRabbit<\/h2>/,/<\/div>/p' pr_content.html > summary_section.html

          # 2. Summary가 제대로 추출되었는지 확인
          SUMMARY_SIZE=$(wc -c < summary_section.html)
          echo "📄 추출된 Summary 섹션 크기: ${SUMMARY_SIZE} bytes"

          if [ "$SUMMARY_SIZE" -lt 100 ]; then
            echo "⚠️ Summary 섹션이 너무 작습니다. 다른 방식으로 추출 시도..."
            # 더 넓은 범위로 추출
            sed -n '/Summary by CodeRabbit/,/<!-- end of auto-generated comment/p' pr_content.html > summary_section.html
            SUMMARY_SIZE=$(wc -c < summary_section.html)
            echo "📄 재추출된 Summary 섹션 크기: ${SUMMARY_SIZE} bytes"
          fi

          # 3. HTML 태그 제거하고 텍스트만 추출
          cat summary_section.html | sed 's/<[^>]*>//g' | sed 's/&nbsp;/ /g; s/&amp;/\&/g; s/&lt;/</g; s/&gt;/>/g; s/&quot;/"/g' > raw_summary.txt

          # 4. 추출된 내용 확인 (전체 내용 출력)
          echo "📋 추출된 Summary 전체 내용:"
          echo "=========================================="
          cat raw_summary.txt
          echo "=========================================="

          echo "📄 파일 크기 및 줄 수:"
          echo "- 파일 크기: $(wc -c < raw_summary.txt) bytes"
          echo "- 줄 수: $(wc -l < raw_summary.txt) lines"

          # Python으로 실제 CodeRabbit Summary 형식에 맞는 파싱 로직
          cat > parse_changelog.py << 'EOF'
          import re
          import json
          import html
          import sys
          import os
          from datetime import datetime


          def extract_items_from_section(html_content, section_title):
              """특정 섹션의 아이템들을 추출"""
              print(f"📋 '{section_title}' 섹션에서 아이템 추출 중...")

              # 다양한 패턴으로 섹션 찾기
              patterns = [
                  f'<strong[^>]*>{re.escape(section_title)}[^<]*</strong>',
                  f'<li[^>]*><strong[^>]*>{re.escape(section_title)}[^<]*</strong>',
                  f'<p[^>]*><strong[^>]*>{re.escape(section_title)}[^<]*</strong></p>'
              ]

              section_match = None
              for pattern in patterns:
                  section_match = re.search(pattern, html_content, re.IGNORECASE)
                  if section_match:
                      print(f"✅ 패턴 매치: {pattern[:50]}...")
                      break

              if not section_match:
                  print(f"❌ '{section_title}' 섹션을 찾을 수 없습니다")
                  return []

              # 섹션 이후의 ul 태그 찾기
              after_section = html_content[section_match.end():]
              ul_match = re.search(r'<ul[^>]*>(.*?)</ul>', after_section, re.DOTALL)

              if not ul_match:
                  print(f"❌ '{section_title}' 섹션 이후 ul 태그를 찾을 수 없습니다")
                  return []

              # li 태그들에서 텍스트 추출
              ul_content = ul_match.group(1)
              li_items = re.findall(r'<li[^>]*>(.*?)</li>', ul_content, re.DOTALL)

              items = []
              for item in li_items:
                  clean_text = re.sub(r'<[^>]*>', '', item)
                  clean_text = html.unescape(clean_text).strip()
                  if clean_text:
                      items.append(clean_text)

              return items

          def detect_categories(html_content):
              """HTML에서 동적으로 카테고리 감지"""
              print("🔍 HTML에서 카테고리 감지 시작...")
              detected_categories = {}

              # strong 태그 안의 카테고리 제목들 찾기
              strong_texts = re.findall(r'<strong[^>]*>([^<]+)</strong>', html_content, re.IGNORECASE)

              for strong_text in strong_texts:
                  clean_text = strong_text.strip()
                  items = extract_items_from_section(html_content, clean_text)
                  if items:
                      safe_key = re.sub(r'[^a-zA-Z0-9가-힣]', '_', clean_text.lower()).strip('_')
                      if not safe_key:
                          safe_key = f"category_{len(detected_categories)}"

                      detected_categories[safe_key] = {
                          'title': clean_text,
                          'items': items
                      }

              return detected_categories

          def main():
              # 환경 변수에서 값 가져오기
              version = os.environ.get('VERSION')
              pr_number = int(os.environ.get('PR_NUMBER'))
              today = os.environ.get('TODAY')
              timestamp = os.environ.get('TIMESTAMP')
              
              try:
                  # HTML 파일에서 카테고리 감지
                  with open('summary_section.html', 'r', encoding='utf-8') as f:
                      html_content = f.read()
                  
                  categories = detect_categories(html_content)
                  
                  # Raw summary 저장
                  with open('summary_section.html', 'r', encoding='utf-8') as f:
                      raw_summary = re.sub(r'<[^>]*>', '', f.read()).strip()
                  
                  # 새로운 릴리즈 엔트리 생성 (다른 프로젝트와 일치하는 형식)
                  new_release = {
                      "version": version,
                      "project_type": "react-native",
                      "date": today,
                      "pr_number": pr_number,
                      "raw_summary": raw_summary,
                      "parsed_changes": {}
                  }
                  
                  # 동적 카테고리를 parsed_changes에 추가
                  for key, value in categories.items():
                      new_release["parsed_changes"][key] = value["items"]
                  
                  print("🎯 생성된 릴리즈 엔트리:")
                  for key, items in new_release["parsed_changes"].items():
                      print(f"  - {key}: {len(items)}개 항목")
                      for item in items[:2]:
                          print(f"    • {item[:70]}...")
                  
                  # CHANGELOG.json 업데이트
                  try:
                      with open('CHANGELOG.json', 'r', encoding='utf-8') as f:
                          changelog_data = json.load(f)
                  except (FileNotFoundError, json.JSONDecodeError):
                      changelog_data = {
                          "metadata": {
                              "lastUpdated": timestamp,
                              "currentVersion": version,
                              "projectType": "react-native",
                              "totalReleases": 0
                          },
                          "releases": []
                      }
                  
                  # 메타데이터 업데이트
                  if "metadata" not in changelog_data:
                      changelog_data["metadata"] = {}
                  
                  changelog_data["metadata"]["lastUpdated"] = timestamp
                  changelog_data["metadata"]["currentVersion"] = version
                  changelog_data["metadata"]["projectType"] = "react-native"
                  changelog_data["metadata"]["totalReleases"] = len(changelog_data.get("releases", [])) + 1
                  
                  # 새 릴리즈를 맨 앞에 추가
                  if "releases" not in changelog_data:
                      changelog_data["releases"] = []
                  changelog_data["releases"].insert(0, new_release)
                  
                  # 파일 저장
                  with open('CHANGELOG.json', 'w', encoding='utf-8') as f:
                      json.dump(changelog_data, f, indent=2, ensure_ascii=False)
                  
                  print("✅ CHANGELOG.json 업데이트 완료!")
                  total_items = sum(len(items) for items in new_release["parsed_changes"].values())
                  print(f"📊 총 {len(new_release['parsed_changes'])}개 카테고리, {total_items}개 변경사항")
                  
              except Exception as e:
                  print(f"❌ 파싱 오류: {e}")
                  import traceback
                  print(f"📋 상세 오류:\n{traceback.format_exc()}")
                  
                  # 실패 시 기본 엔트리 생성
                  fallback_release = {
                      "version": version,
                      "project_type": "react-native",
                      "date": today,
                      "pr_number": pr_number,
                      "raw_summary": "파싱 실패",
                      "parsed_changes": {
                          "general": [f"PR #{pr_number}의 변경사항이 반영되었습니다."]
                      }
                  }
                  
                  try:
                      with open('CHANGELOG.json', 'r', encoding='utf-8') as f:
                          changelog_data = json.load(f)
                  except:
                      changelog_data = {
                          "metadata": {
                              "lastUpdated": timestamp,
                              "currentVersion": version,
                              "projectType": "react-native",
                              "totalReleases": 1
                          },
                          "releases": []
                      }
                  
                  if "releases" not in changelog_data:
                      changelog_data["releases"] = []
                  changelog_data["releases"].insert(0, fallback_release)
                  
                  with open('CHANGELOG.json', 'w', encoding='utf-8') as f:
                      json.dump(changelog_data, f, indent=2, ensure_ascii=False)
                  
                  print("⚠️ 기본 엔트리로 CHANGELOG.json 업데이트 완료")

          if __name__ == "__main__":
              main()
          EOF

          # 환경 변수 설정하고 Python 스크립트 실행
          export VERSION="$VERSION"
          export PR_NUMBER="$PR_NUMBER"
          export TODAY="$TODAY"
          export TIMESTAMP="$TIMESTAMP"

          python3 parse_changelog.py

      - name: Generate All Documentation Files
        run: |
          echo "📄 모든 문서 파일 생성 중..."

          python3 << 'PYTHON_SCRIPT'
          import json
          import os

          def get_category_title(key):
              """카테고리 키를 한국어 제목으로 변환"""
              category_titles = {
                  'new_features': '신규 기능',
                  'bug_fixes': '버그 수정', 
                  'style': '스타일',
                  'refactor': '리팩토링',
                  'chores': '작업 정리',
                  'documentation': '문서',
                  'tests': '테스트',
                  'performance': '성능',
                  'security': '보안',
                  'general': '일반'
              }
              return category_titles.get(key.lower(), key.replace('_', ' ').title())

          try:
              with open('CHANGELOG.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              
              # 1. CHANGELOG.md 생성 (다른 프로젝트와 일치하는 형식)
              print("📝 CHANGELOG.md 생성 중...")
              with open('CHANGELOG.md', 'w', encoding='utf-8') as f:
                  f.write("# CHANGELOG\n\n")
                  f.write("이 파일은 워크플로우에 의해 자동으로 생성됩니다.\n\n")

                  # 메타데이터 정보 추가
                  metadata = data.get('metadata', {})
                  if metadata:
                      f.write(f"**프로젝트 타입:** {metadata.get('projectType', 'Unknown')}  \n")
                      f.write(f"**현재 버전:** {metadata.get('currentVersion', 'Unknown')}  \n")
                      f.write(f"**마지막 업데이트:** {metadata.get('lastUpdated', 'Unknown')}  \n\n")
                      f.write("---\n\n")

                  for release in data.get('releases', []):
                      version = release.get('version', 'Unknown')
                      date = release.get('date', release.get('timestamp', '')[:10])
                      pr_number = release.get('pr_number', 'N/A')
                      parsed_changes = release.get('parsed_changes', {})
                      
                      f.write(f"## v{version} ({date})\n\n")
                      f.write(f"**PR:** #{pr_number}\n\n")
                      
                      # parsed_changes가 있는 경우 카테고리별로 출력
                      if parsed_changes and any(items for items in parsed_changes.values() if items):
                          for category_key, items in parsed_changes.items():
                              if items and len(items) > 0:
                                  # 카테고리가 dict 형태인 경우 (title과 items가 분리된 경우)
                                  if isinstance(items, dict) and 'items' in items:
                                      actual_items = items['items']
                                      title = items.get('title', get_category_title(category_key))
                                  else:
                                      actual_items = items
                                      title = get_category_title(category_key)
                                  
                                  f.write(f"**{title}**\n")
                                  for item in actual_items:
                                      f.write(f"- {item}\n")
                                  f.write("\n")
                      else:
                          # 변경사항이 없는 경우 기본 메시지
                          f.write(f"**일반**\n")
                          f.write(f"- PR #{pr_number}의 변경사항이 반영되었습니다.\n\n")
                      
                      f.write("---\n\n")
              
              # 2. PREVIOUS_CHANGES.md 생성
              print("📝 PREVIOUS_CHANGES.md 생성 중...")
              with open('PREVIOUS_CHANGES.md', 'w', encoding='utf-8') as f:
                  f.write("# 이전 변경사항\n\n")
                  
                  # 최신 버전(인덱스 0)을 제외한 나머지 버전들 처리
                  previous_releases = data.get('releases', [])[1:]
                  
                  if not previous_releases:
                      f.write("아직 이전 변경사항이 없습니다.\n")
                  else:
                      for release in previous_releases:
                          version = release.get('version', 'Unknown')
                          date = release.get('date', release.get('timestamp', '')[:10])
                          pr_number = release.get('pr_number', 'N/A')
                          parsed_changes = release.get('parsed_changes', {})
                          
                          f.write(f"## [{version}] - {date}\n\n")
                          f.write(f"**PR:** #{pr_number}\n\n")
                          
                          # parsed_changes가 있는 경우 카테고리별로 출력
                          if parsed_changes and any(items for items in parsed_changes.values() if items):
                              for category_key, items in parsed_changes.items():
                                  if items and len(items) > 0:
                                      # 카테고리가 dict 형태인 경우 (title과 items가 분리된 경우)
                                      if isinstance(items, dict) and 'items' in items:
                                          actual_items = items['items']
                                          title = items.get('title', get_category_title(category_key))
                                      else:
                                          actual_items = items
                                          title = get_category_title(category_key)
                                      
                                      f.write(f"**{title}**\n")
                                      for item in actual_items:
                                          f.write(f"- {item}\n")
                                      f.write("\n")
                          else:
                              # 변경사항이 없는 경우 기본 메시지
                              f.write(f"**일반**\n")
                              f.write(f"- PR #{pr_number}의 변경사항이 반영되었습니다.\n\n")
                          
                          f.write("---\n\n")
              
              print("✅ 모든 문서 파일 생성 완료!")
              
          except Exception as e:
              print(f"❌ 문서 생성 실패: {e}")
              import traceback
              print(f"📋 상세 오류:\n{traceback.format_exc()}")
              exit(1)
          PYTHON_SCRIPT

      - name: Commit and push all changes
        run: |
          echo "📝 모든 변경사항을 커밋하고 푸시합니다..."

          git add package.json ios/Wit/Info.plist android/app/build.gradle CHANGELOG.json CHANGELOG.md PREVIOUS_CHANGES.md

          if ! git diff --staged --quiet; then
            # 커밋 메시지 생성
            VERSION="${{ steps.versioning.outputs.new_version }}"
            PR_NUMBER="${{ needs.detect-summary.outputs.pr_number }}"
            COMMIT_MSG="chore: update version to v${VERSION} and CHANGELOG (PR #${PR_NUMBER}) [skip ci]"
            git commit -m "$COMMIT_MSG"
            
            echo "🚀 main 브랜치에 푸시 중..."
            git push origin main
            
            echo "✅ 버전 및 CHANGELOG 업데이트 완료. main 브랜치에 푸시됨"
          else
            echo "📄 변경사항이 없어 커밋을 건너뜁니다."
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create and push Git tag
        run: |
          VERSION="v${{ steps.versioning.outputs.new_version }}"

          echo "🏷️ Git 태그 생성 중: $VERSION"

          # 기존 태그 존재 여부 확인
          if git tag -l "$VERSION" | grep -q "$VERSION"; then
            echo "⚠️ 태그 $VERSION이 이미 존재합니다. 기존 태그를 삭제하고 새로 생성합니다."
            git tag -d "$VERSION" || true
            git push origin --delete "$VERSION" || true
          fi

          # 새 태그 생성 및 푸시
          git tag "$VERSION"
          git push origin "$VERSION"

          echo "✅ Git 태그 $VERSION 생성 및 푸시 완료"

      - name: Cleanup
        run: |
          rm -f pr_content.html summary_section.html raw_summary.txt parse_changelog.py

      - name: Workflow Complete Notification
        run: |
          echo "🎉 버전 업데이트 및 CHANGELOG 업데이트 완료!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📋 업데이트 정보:"
          echo "  • 새 버전: v${{ steps.versioning.outputs.new_version }}"
          echo "  • 프로젝트 타입: React Native"
          echo "  • PR 번호: #${{ needs.detect-summary.outputs.pr_number }}"
          echo "  • 업데이트된 파일:"
          echo "    - package.json (버전 업데이트)"
          echo "    - ios/Wit/Info.plist (iOS 버전 동기화)"
          echo "    - android/app/build.gradle (Android 버전 동기화)"
          echo "    - CHANGELOG.json (릴리즈 정보)"
          echo "    - CHANGELOG.md (마크다운 문서)"
          echo "    - PREVIOUS_CHANGES.md (이전 변경사항)"
          echo "  • 다음 단계: TestFlight 배포 워크플로우 자동 실행"
          echo "  • 최종 단계: 배포 완료 후 PR 자동 머지"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
